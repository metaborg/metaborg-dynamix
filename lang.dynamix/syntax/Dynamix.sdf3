module Dynamix

imports
  Common

context-free start-symbols 
  Module

context-free syntax

 Module.Module = <
  module <ID> 
   <Imports*>
   <Definitions*>
 >
 
 Imports.Imports = <imports
  <Import*>
>
 Import.Import = ID

 Definitions.Defs = <rules
  <Definition*>
>
 
 Definition.Def = <
  <DEFNAME><DefParam?>(<{Pattern ","}*>) = 
   <Block>
 >
 
 DefParam.Param = <[<DEFNAME>]>
 DefParamType.ParamType = <[<{Type "->"}*> -\> <Type>]>
 
 Definition.TypeDef = <<DEFNAME><DefParamType?>:: <{Type "->"}*> -\> <Type>>
 Block.Block = <   
  <{Instruction ";"}+>
 >
 
 Pattern.Var = <<ID>>
 
 Type.Term = <term>
 Type.Code = <code>
 Type.Exp = <exp>
 Type.Instr = <instr>
 Type.Path = <path>
 Type.Return = <return>
 
 Pattern.Pat = <<ID>(<{Pattern ","}*>)>
 Pattern.List = <[<{Pattern ","}*>]>
 Pattern.ListTail = <[<{Pattern ","}+> | <Pattern>]>
 Pattern.ListLast = <[<Pattern> || <{Pattern ","}+>]>
 
 Instruction.Bind = [
  [ID] <- [Exp]
 ]
 Instruction.Return = <return(<{Exp ","}*>)> {prefer}
 Instruction.Exp = Exp
 
 Exp.Call = <<DEFNAME><DefParam?>(<{Exp ","}*>)>
 Exp.CallPrim = <<PRIMNAME><DefParam?>(<{Exp ","}*>)> {prefer}
 Exp.Var = <<ID>>
 Exp.Path = <[<{Exp ","}*>]>
 Exp.Int = INT
 
 Exp.Quote = [<[Block]>]
 Exp.Splice = <~<Exp>>
 Exp.Link = <&<LINKNAME>>
 Exp.Cont = <$<CONTNAME>>