module Dynamix

imports
  Common

context-free start-symbols 
  Module

context-free syntax

 Module.Module = <
  module <ID> 
   <Imports*>
   <Definitions*>
 >
 
 Imports.Imports = <imports
  <Import*>
>
 Import.Import = ID

 Definitions.Defs = <rules
  <Definition*>
>
 
 Definition.Def = <
  <DEFNAME><DefParam?>(<{Pattern ","}*>) = 
   <Block>
 >
 
 DefParam.Param = <[<{DEFNAME ", "}+>]>
 DefParamTypeList.ParamTypeList = <[<{DefParamType ", "}+>]>
 
 DefParamType.ParamType = <<{Type "->"}*> -\> <Type>>
 Definition.TypeDef = <<DEFNAME><DefParamTypeList?>:: <{Type "->"}*> -\> <Type>>
 Block.Block = <   
  <{Instruction ";"}+>
 >
 
 
 Type.Term = <ast>
 Type.Code = <code>
 Type.Exp = <val>
 Type.Instr = <instr>
 Type.Path = <path>
 Type.Return = <return>
 
 Pattern.DNXTerm_Var = <<ID>>
 Pattern.DNXTerm_Int = INT
 Pattern.DNXTerm_String = STRING
 Pattern.DNXTerm_Pat = <<ID>(<{Pattern ","}*>)>
 Pattern.DNXTerm_List = <[<{Pattern ","}*>]>
 Pattern.DNXTerm_ListTail = <[<{Pattern ","}+> | <Pattern>]>
 Pattern.DNXTerm_ListLast = <[<Pattern> || <{Pattern ","}+>]>
 
 Instruction.DNX_Bind = [
  [ID] <- [Exp]
 ]
 Instruction.DNX_Return = <return(<Exp>)> {prefer}
 Instruction.DNX_Exp = Exp
 
 Exp.DNX_Call = <<DEFNAME><DefParam?>(<{Exp ","}*>)>
 Exp.DNX_CallPrim = <<PRIMNAME><DefParam?>(<{Exp ","}*>)> {prefer}
 Exp.DNX_Var = <<ID>>
 Exp.DNX_Path = <[<{Exp ","}*>]>
 
 Exp.DNX_Quote = [<[Block]>]
 Exp.DNX_Splice = <~<Exp>>
 Exp.DNX_Link = <&<LINKNAME>>
 Exp.DNX_Cont = <$<CONTNAME>>
 
 Exp.DNX_Term = Pattern {avoid}
 