module Dynamix

imports
  
  Common
  fvm-roger
  fvm-common

context-free start-symbols
  
  Spec

context-free syntax // Templating
  StmtTemplateVar.DNX_StmtTemplateVar = <[[<TVar>]]>
  ExpTemplateVar.DNX_ExpTemplateVar = <\<<TVar>\>>
  
  VarOrWildcard = Var
  VarOrWildcard = Wildcard
  
  TVar.DNX_VarRef = ID
  Var.DNX_VarRef = ID
  Wildcard.DNX_Wildcard = WILDCARD
  
context-free syntax
  Spec.DNX_Spec = <
<Templates*>
<Rules+>
>

context-free syntax // Templates
Templates.DNX_Templates = <templates
    <{Template "\n"}+>
>


Template.DNX_Template = <
<TEMPLATENAME>(<{TemplateVarDecl ","}*>)<TemplateLabelDecls?>:
	<RGRStmtOrExp>
>

TemplateVarDecl.DNXT_VarDecl = <<TemplateVarType> <TVar>>
TemplateVarType.DNXT_StmtType = <stmt>
TemplateVarType.DNXT_StmtExpType = <stmt-exp>
TemplateVarType.DNXT_ExpType = <exp>

RGRStmtOrExp.DNXT_Stmts = Instr+ {prefer}
RGRStmtOrExp.DNXT_Exp = Exp      {prefer}
RGRStmtOrExp.DNXT_StmtsExp = Instr+ Exp

TemplateLabelDecls.DNXT_LabelDecls = <with <{TemplateLabelDecl ", "}+>>
TemplateLabelDecl.DNXT_LabelDecl = LABEL

context-free syntax // Rules

Rules.DNX_Rules = <
rules
    <{Rule "\n"}*>
>

Rule.DNX_Rule = <<RULENAME>: <StrategoTerm> ^<ContinuationVar> -\> <RuleOutput>
<RuleBody?>

>

StrategoTerm.DNX_Tuple = <(<{StrategoTerm ","}*>)>
StrategoTerm.DNX_String = STRING
StrategoTerm.DNX_Int = INT
StrategoTerm.DNX_Term = <<NamedStrategoTerm?><CONSTRUCTOR>(<{StrategoTerm ", "}*>)>
StrategoTerm.DNX_Var  = ID
StrategoTerm.DNX_WildCard  = WILDCARD
StrategoTerm.DNX_List = <[<{StrategoTerm ", "}*> <StrategoTail?>]>
StrategoTail.DNX_Tail = <| <StrategoTerm>>
StrategoTerm.DNX_Last = <|| <{StrategoTerm ", "}+>>
NamedStrategoTerm.TermName = <<ID>@>

ContinuationVar.DNXC_VarDecl  = Continuation
ContinuationVar.DNXC_VarDecls = <(<{Continuation ", "}+>)>
Continuation = ID
Continuation.This = <this>

Sequence = <(<Sequence>)> {bracket}
Sequence.DNX_Sequence = <<{DNXStmt ";"}+>>
Sequence.DNX_Sequence2 = <<{DNXStmt ";"}+>;>

RuleOutput.DNX_RuleOutput = <<RuleContinuation> <With?>>
RuleContinuation.Default = <continue>
RuleContinuation.Ref = ID

With.With = <with <{DNXExp ", "}+>>

RuleBody.DNX_RuleBody = <where
    <Sequence>
>

DNXStmt.DNX_Exp = DNXExp
DNXStmt.DNX_ExpAssign = <<Var> := <DNXExp>>
DNXStmt.DNX_StmtAssign = <<Var> ::= <DNXExp>>
DNXStmt.DNX_LookupAssign = <<Var> \<- <DNXExp>>
DNXStmt.DNX_CallAssign = <<{Var ","}+> := call <DNXExp>>
DNXStmt.DNX_RegisterSlots = <register-slots [<{Var ","}+>]>
//DNXStmt.DNX_RegisterFunc = <assign-function [<{DNXExp ","}+>]>


DNXExp = <(<DNXExp>)> {bracket}
DNXExp.DNX_Ref = ID
DNXExp = DNXScopeExp

DNXScopeExp = Scope
Scope.DNX_InScope = <<LinkRef>{
  <Sequence>
}>

DNXExp.TemplateApp = <template (<{TemplateArg ","}*>) in <TEMPLATENAME>>
DNXExp.AnonTemplateApp = <template (<{AnonTemplateVarDecl ","}*>) in [[
  <RGRStmtOrExp>
]] <TemplateLabelDecls?>>

DNXExp.SequenceApps = <sequence <RuleApp>>
DNXExp = RuleApp
DNXExp.NewCF = <new-cf <DNXExp> ^<ContinuationVar>>
DNXExp.NewCLosure = <new-clos length(<DNXExp>) <DNXExp>>
DNXExp.Store = <store <RuleApp> in <DNXExp>>
DNXExp.Let = <let <RuleApp> in <Scope>>
DNXExp.ResolveVar = <resolve <Var>>
DNXExp.RegisterFunc = <register <Var> as <Sequence>>

RuleApp.RuleApp = <<RULENAME> <DNXExpOrTerm> ^<ContinuationVar>>

AnonTemplateVarDecl.VarDecl = <<TemplateVarDecl>: <TemplateArg>>
TemplateArg.DNXT_Arg = <<Sequence>>

DNXExpOrTerm = DNXExp
DNXExpOrTerm = StrategoTerm

//WhereAssign.Set = <resolved <Var> := <DExp>>
//WhereCode.Concat = <<{WhereCodeExp ";"}+>>
//WhereCodeExp = DExp
//
//DExp.TemplateApp = <<TEMPLATENAME>(<{Var ", "}*>)>
//DExp.NewCF = <new <DExp> ^<ContinuationVar>>
//DExp.Sequence = <sequence <DApp>>
//DExp.Native = <native {
//  <InstrOrExp>
//}>
//DExp.Store = <store <DApp> @ <ControlFrame>>
//DExp.Resolve = <resolve(<Var>)>
//DExp.Get = <get(<DExp>)>
//DExp.Call = <call^<ControlFrame>>
//DExp.ResolveBlock = <resolve_block(<Var>)>
//DExp.RegisterBlock = <register_block(<Var>, <DExp>)>
//DExp.VarRef = Var
//DExp.Scope = <<LinkRef>{
//    <WhereCode>
//}>
//DExp = DApp
//DApp.Recurse = <<RULENAME>:: <Term>^<ControlFrame>>
//
//ControlFrame.Var = <<Var>>
//ControlFrame.This = <this>
//
