module Common

lexical syntax

  ID             = [a-zA-Z\_] [a-zA-Z0-9\_]*
  WILDCARD       = [\_]
  CONSTRUCTOR    = [A-Z] [a-zA-Z0-9\_]* 
  TEMPLATENAME   = [\_] [\_a-zA-Z0-9]* 
  RULENAME       = [a-z] [a-z\-]* 
  INT            = "-"? [0-9]+ 
  STRING         = "\"" StringChar* "\"" 
  StringChar     = ~[\"\n] 
  StringChar     = "\\\"" 
  StringChar     = BackSlashChar 
  BackSlashChar  = "\\" 
  LAYOUT         = [\ \t\n\r] 
  CommentChar    = [\*] 
  LAYOUT         = "/*" InsideComment* "*/" 
  InsideComment  = ~[\*] 
  InsideComment  = CommentChar 
  LAYOUT         = "//" ~[\n\r]* NewLineEOF 
  NewLineEOF     = [\n\r] 
  NewLineEOF     = EOF 
  EOF            =  

lexical syntax
  ID = "this"       {reject}
  ID = "resolve"    {reject}
  ID = "resolved"   {reject}
  ID = "continue"   {reject}
  ID = "where"      {reject}
  ID = "with"       {reject}
  ID = "_"          {reject}
  ID = "rules"      {reject}
  ID = "natives"    {reject}
  
lexical restrictions

  // Ensure greedy matching for lexicals
  
  CommentChar   -/- [\/]
  INT           -/- [0-9]
  ID            -/- [a-zA-Z0-9\_]
  WILDCARD      -/- [a-zA-Z0-9\_]
  TEMPLATENAME  -/- [a-zA-Z0-9\_]
  CONSTRUCTOR   -/- [a-zA-Z0-9\_]
  RULENAME      -/- [a-z\-]
  
  // EOF may not be followed by any char
  
  EOF           -/- ~[]
  
  // Backslash chars in strings may not be followed by " 
  
  BackSlashChar -/- [\"]

context-free restrictions

  // Ensure greedy matching for comments
  
  LAYOUT? -/- [\ \t\n\r]
  LAYOUT? -/- [\/].[\/]
  LAYOUT? -/- [\/].[\*]
