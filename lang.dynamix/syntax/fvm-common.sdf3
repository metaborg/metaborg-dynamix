module fvm-common

lexical syntax

  LOCAL          = "r" [0-9]+
  REGISTER       = [a-z]+
//  ID             = [a-zA-Z] [a-zA-Z0-9\_\.]*
  LIB            = [a-z] [a-zA-Z0-9\_\.]*
  LIBFUNC        = [a-z] [a-zA-Z0-9\_]*
  LABEL          = [A-Z\_] [A-Z0-9\_]* 
  CONTSLOT       = [a-z\_] [a-z\_]* 
  INT            = "-"? [0-9]+ 
  INTLZ          = [1-9][0-9]* 
  INTLEZ         = [0-9]+ 
  BOOL           = "true"
  BOOL           = "false"
  
  CHAR           = "'" ~[\'\t\n] "'"
  CHAR           = "'\\t'"
  CHAR           = "'\\n'"
  CHAR           = "'\\''"
  
  STRING         = "\"" StringChar* "\""
  StringChar     = ~[\"\t\n]
  StringChar     = "\\t"
  StringChar     = "\\n"
  StringChar     = "\\\""
  StringChar     = " "
  
  BackSlashChar  = "\\" 
  LAYOUT         = [\ \t\n\r] 
  CommentChar    = [\*] 
  LAYOUT         = "/*" InsideComment* "*/" 
  InsideComment  = ~[\*] 
  InsideComment  = CommentChar 
  LAYOUT         = "//" ~[\n\r]* NewLineEOF 
  NewLineEOF     = [\n\r] 
  NewLineEOF     = EOF 
  EOF            =  

lexical syntax
  LIBFUNC = "ipush"     {reject}
  LIBFUNC = "iload"     {reject}
  LIBFUNC = "addi"      {reject}
  LIBFUNC = "subi"      {reject}
  LIBFUNC = "muli"      {reject}
  LIBFUNC = "divi"      {reject}
  LIBFUNC = "modi"      {reject}
  LIBFUNC = "eqi"       {reject}
  LIBFUNC = "lti"       {reject}
  LIBFUNC = "gti"       {reject}
  LIBFUNC = "ori"       {reject}
  LIBFUNC = "xori"      {reject}
  LIBFUNC = "andi"      {reject}
  
  LIBFUNC = "print"     {reject}
  LIBFUNC = "debug"     {reject}
  LIBFUNC = "debug!"    {reject}
  
  LIBFUNC = "newc"      {reject}
  LIBFUNC = "cnew"      {reject}
  LIBFUNC = "unpack"    {reject}
  
  LIBFUNC = "int?"      {reject}
  LIBFUNC = "cont?"     {reject}
  LIBFUNC = "frame?"    {reject}
  LIBFUNC = "closure?"  {reject}
  
  LIBFUNC = "new"       {reject}
  LIBFUNC = "newr"      {reject}
  LIBFUNC = "link"      {reject}
  LIBFUNC = "linkr"     {reject}
  LIBFUNC = "copy"      {reject}
  LIBFUNC = "copyr"     {reject}
  LIBFUNC = "size"      {reject}
  LIBFUNC = "set"       {reject}
  LIBFUNC = "setr"      {reject}
  LIBFUNC = "get"       {reject}
  LIBFUNC = "getr"      {reject}
  
  LIBFUNC = "exitscope" {reject}
  LIBFUNC = "newscope"  {reject}
  LIBFUNC = "mkcurrent" {reject}
  LIBFUNC = "getcurrent"{reject}
  
  LIBFUNC = "jumpz"     {reject}
  LIBFUNC = "jump"      {reject}
  LIBFUNC = "call"      {reject}
  LIBFUNC = "tailcall"  {reject}
  LIBFUNC = "return"    {reject}
  LIBFUNC = "yield"     {reject}
  LIBFUNC = "rget"      {reject}
  
  LIBFUNC = "pop"       {reject}
  LIBFUNC = "dup"       {reject}
  LIBFUNC = "swap"      {reject}
  
  LIBFUNC = "spush"     {reject}
  LIBFUNC = "sload"     {reject}
  LIBFUNC = "cpush"     {reject}
  LIBFUNC = "cload"     {reject}
  LIBFUNC = "printc"    {reject}
  LIBFUNC = "cget"      {reject}
  LIBFUNC = "ccall"     {reject}
  LIBFUNC = "cret"      {reject}
  LIBFUNC = "transfer"  {reject}
  LIBFUNC = "cset"      {reject}
  LIBFUNC = "csetr"     {reject}
  LIBFUNC = "cget"      {reject}
  LIBFUNC = "cgetr"     {reject}
  
  LIBFUNC = "throw"     {reject}
  LIBFUNC = "try"       {reject}

lexical restrictions

  // Ensure greedy matching for lexicals
  
  CommentChar   -/- [\/]
  INT           -/- [0-9]
  INTLZ         -/- [0-9]
  INTLEZ        -/- [0-9]
  LIB           -/- [a-zA-Z0-9\_]
  LIBFUNC       -/- [a-zA-Z0-9\_]
  LABEL         -/- [A-Z0-9\_]
  CONTSLOT      -/- [a-z0-9\_]
  
  // EOF may not be followed by any char
  
  EOF           -/- ~[]
  
  // Backslash chars in strings may not be followed by " 
  
  BackSlashChar -/- [\"]

context-free restrictions

  // Ensure greedy matching for comments
  
  LAYOUT? -/- [\ \t\n\r]
  LAYOUT? -/- [\/].[\/]
  LAYOUT? -/- [\/].[\*]
  
context-free syntax
  BlockLabel.FVM_Label = LABEL
  Label = BlockLabel
  Label.FVM_ExternalLabel = LIBFUNC
  
  PathOrEmpty = EmptyPath
  PathOrEmpty = Path
  
  EmptyPath.FVM_Self  = <[]>
  Path.FVM_Path  = <[<{PathRef ","}+>]>
  
  PathRef = SlotRef
  PathRef = LinkRef
  
  SlotRef.FVM_Slot    = INTLEZ
  LinkRef.FVM_Link    = LABEL
  LinkRef.FVM_LinkIdx = <_l<INTLEZ>>
    
  ContRef.FVM_Cont    = CONTSLOT
  ContRef.FVM_ContIdx = <_c<INTLEZ>>
  
  CopyPolicy.FVM_DeepCopy    = <deep>
  CopyPolicy.FVM_ShallowCopy = <{<{Path ","}*>}>
  
  Header.FVM_Header = items:HeaderItem* { layout (align-list items) }
  HeaderItem = Import
  HeaderItem = InitSize
  HeaderItem = Alias
  HeaderItem = InitialBlock
  
  Import.FVM_Import  = <from <LIB> import <{LIBFUNC ", "}+>>
  Import.FVM_ImportAs = <from <LIB> import <LIBFUNC> as <LIBFUNC>>
  Import.FVM_Export   = <export <LabelOrLibFunc> as <LIBFUNC>>
  
  LabelOrLibFunc.Local    = LABEL
  LabelOrLibFunc.External = LIBFUNC
  
  InitSize.FVM_InitSize = <#init <INTLEZ>>
  
  Alias.FVM_LinkAlias = <#link <LinkRef> -\> <INTLEZ>>
  Alias.FVM_ContAlias = <#cont <ContRef> -\> <INTLEZ>>
  InitialBlock.FVM_InitBlock = <#start <LABEL>>
  
  CFRSize.RGR_Local = <local := <INTLEZ>>
  CFSSize.STC_Stack = <stack := <INTLEZ>>
/* 

Values 

CodeV
- jump
- return 
- ...

IntV
- add
- pushi
- jumpz

BoolV
- true, false
- and 
- or

FrameRefV
- new
- set
- get 

closure =

Frame with code pointer + reference pointer

*/
  
/*

initialization of frame slots / soundness 

distinction between frame links and reference edges to frames 

well-formedness properties of instructions?

e.g. clean operand stack

*/



