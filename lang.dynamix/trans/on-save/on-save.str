module on-save

imports  
  signatures/Dynamix-sig
  
  nabl2/runtime/analysis/constraint-compat
  nabl2/api
  nabl2/runtime
  
  codegen/dnx-common
  external

rules
  // The on-save handler
  // Compiles the Dynamix spec file and stores it in the src-gen folder
  dnx-on-save:
    (_, _, ast@Module(name, _, _, _, _, _), path, project-path) -> (full_name, result)
    where
      <nabl2-get-ast-analysis; not(nabl2-analysis-has-errors)> ast
    with
      filename := $[src-gen/dynamix/[name].dnxc]
    ; full_name := $[[project-path]/[filename]]
    ; result   := <compile-dnx-spec> ast
    ; dnx-log(|"INFO", $<Writing compiled Dynamix spec to '<filename>'>)
  
  // The on-save handler for when the analysis fails
  // Discards the current spec and just reloads the previous one
  dnx-on-save:
    (_, _, ast@Module(name, _, _, _, _, _), path, project-path) -> (full_name, old)
   with
      filename := $[src-gen/dynamix/[name].dnxc]
    ; full_name := $[[project-path]/[filename]]
    ; old := <(file-exists; ReadFromFile) <+ !None()> full_name
    ; dnx-log(|"INFO", $<Skipping compilation of '<filename>' as it has errors>)
  
rules // Rules for compiling a Dynamix module to the stored format

  // Compile a module to a Normalized Module with all annotations removed (as they are no longer needed after this)     
  compile-dnx-spec: Module(_,imports,_, Defs(types), Defs(defs), header) -> out 
    with
      // TODO: Check if this path works on Windows
      map := <new-hashtable>;
      <map(make-normDef(|map))> defs;
      grouped_defs := <hashtable-getlist; map( (\ (name, cases) -> DefGroup(name, <reverse> cases) \) )> map;
      out := <strip-annos> NormModule(imports, <check-header> header, grouped_defs)
  
  // Check if the header is non-empty 
  check-header: h@DNX_Header(a, b, c, d) -> h
    where
      <gt> (<length> a, 0);
      <gt> (<length> b, 0);
      <gt> (<length> c, 0)
  check-header: _ -> None()
  
  // Normalize a definition to a definition case
  make-normDef(|ht): d@Def(name, param, args, Block(body)) -> d
    where
      defcase := DefCase(args, param, body);
      cname := <strip-annos> name;
      <hashtable-push(|cname, defcase)> ht  // Note that this is push, not put
   
  