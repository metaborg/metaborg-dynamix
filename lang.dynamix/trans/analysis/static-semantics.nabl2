module analysis/static-semantics

imports

  signatures/-
  analysis/definitions
  analysis/common

rules // Init rule
  init ^ (s) := new s,
    TermT()  <sub! TermOrExpT(),
  	ExpT()   <sub! TermOrExpT(),
  	ReturnT() <sub! InstrT().
  
rules // Module
  // First check if the signature is correct and in the right file
  // After that do the actual module
  [[mod@Module(name@"dynamic-semantics", _, _, _, _, DNX_Header([], _, _, _)) ^(s)]] :=
    false | error $[Missing 'link-labels' in signature] @name,
    module[[mod ^(s)]].

  [[mod@Module(name@"dynamic-semantics", _, _, _, _, DNX_Header(_, [], _, _)) ^(s)]] :=
    false | error $[Missing 'continuations' in signature] @name,
    module[[mod ^(s)]].

  [[mod@Module(name@"dynamic-semantics", _, _, _, _, DNX_Header(_, _, [], _)) ^(s)]] :=
    false | error $[Missing 'namespaces' in signature] @name,
    module[[mod ^(s)]].

  [[mod@Module("dynamic-semantics", _, _, _, _, _) ^(s)]] :=
    module[[mod ^(s)]].

  [[mod@Module(name, _, _, _, _, DNX_Header([_|_], [_|_], [_|_], _)) ^(s)]] :=
    false | error $[Signature only allowed in the main file (for now) ] @name,
    module[[mod ^(s)]].

  [[mod@Module(_, _, _, _, _, _) ^(s)]] :=
    module[[mod ^(s)]].
  
  module[[Module(name, imports, prim_names, Defs(types), Defs(defs), header) ^(s)]] :=
    new module, module ---> s,
    Module{name} <- s,
    Module{name} ===> module,
    distinct/name D(s)/Module | error $[Multiple modules with name [name]] @NAMES,
    
    header          [[header ^(s)]],
//    If we ever fix the issue with imports, we should use this line instead:
//    Map1(typeDecl)  [[types ^(module)]],
    Map1(import)    [[imports ^(module)]],

    new declarations, declarations ---> module,
    Map1(def) [[defs ^(declarations)]].
    
rules  // Header
  header [[DNX_Header(links, continuations, namespaces, _) ^(s)]] := 
    Map1(initLinks) [[ links ^(s)]],
    Map1(initConts) [[ continuations ^(s)]].
    
  initLinks [[(idx, lbl) ^(s) ]] :=
    Link{lbl} <- s,
    Link{lbl}.index := idx.
    
  initConts [[(0, lbl) ^(s) ]] :=
    false | note $[Return of the initial control frame] @lbl,
    Cont{lbl} <- s,
    Cont{lbl}.index := idx.
    
  initConts [[(1, lbl) ^(s) ]] :=
    false | note $[Exeption handler of the initial control frame] @lbl,
    Cont{lbl} <- s,
    Cont{lbl}.index := idx.
    
  initConts [[(idx, lbl) ^(s) ]] :=
    Cont{lbl} <- s,
    Cont{lbl}.index := idx.
    
rules  // Imports
  import [[name ^(s)]] :=
    Module{name} -> s,
    Module{name} |-> d | error $[Cannot resolve module '[name]'] @name.
//    We dont do the actual import as that results in terribly slow analysis times
//    Sometimes they just crash with out of memory errors
//    We should probably think of a fix for this...
//    (Unwanted behaviour can be observed with the Tiger project)
//    Module{name} <=== s.
      
rules // Definitions   
  def[[Def(name, param, args, (ct_instrs, rt_instrs), k) ^(s)]] :=
    Def{name} -> s,
    new def_q_s, def_q_s ---> s,
    Map1(defParam) [[param ^(def_q_s)]],
    Map1(parterm) [[args ^(def_q_s)]],
    
    new def_s,   def_s   ---> def_q_s,
    Map2(ctInstr)[[ct_instrs ^(def_s, def_q_s)]],
    Fold1C(instr) [[rt_instrs ^(def_s, def_s', _)]],
    kParam [[k ^(def_q_s, def_s')]].
  
  defParam [[name ^(s) ]] :=
    Def{name} <- s.
  
  kParam [[ None() ^(s, s_e) ]].
  
  kParam [[ Some( (name, None()) ) ^(s, s_e) ]] :=
    Var{name} <- s.
  
  kParam [[ Some( (name, Some(exp)) ) ^(s, s_e) ]] :=
    Var{name} <- s,
    exp [[ exp ^(s_e, s_e) ]].
    
    
rules // Parameter terms
  parterm[[DNXTerm_Var(name) ^(s)]] :=
    Var{name} <- s.
    
  parterm[[DNXTerm_List(elems) ^(s)]] :=
    partermMap [[elems ^(s)]].
    
  parterm[[DNXTerm_Tuple(elems) ^(s)]] :=
    partermMap [[elems ^(s)]].
    
  parterm[[DNXTerm_At(DNXTerm_Var(name), pattern) ^(s)]] :=
    Var{name} <- s,
    parterm [[pattern ^(s)]].
    
  parterm[[term@DNXTerm_At(name, pattern) ^(s)]] :=
    false | error $[[name] must be a variable] @term.
    
  parterm[[term@DNXTermOp_Add(l, r) ^(s)]] :=
    false | error $[Cannot use meta-arithmetic in rule header] @term.
    
  parterm[[term@DNXTermOp_Sub(l, r) ^(s)]] :=
    false | error $[Cannot use meta-arithmetic in rule header] @term.
     
  parterm[[DNXTerm_Type(pattern, type) ^(s)]] :=
    parterm [[pattern ^(s)]].
    
  parterm[[DNXTerm_ListTail(elems, tail) ^(s)]] :=
    partermMap [[elems ^(s)]],
    parterm [[tail ^(s)]].
    
  parterm[[DNXTerm_ListLast(init, last) ^(s)]] :=
    partermMap [[last ^(s)]],
    parterm [[init ^(s)]].
    
  parterm[[DNXTerm_Pat(name, args) ^(s)]] :=
    partermMap [[args ^(s)]].
    
  parterm[[DNXTerm_Int(_) ^(s)]].
    
  parterm[[DNXTerm_String(_) ^(s)]].
  parterm[[DNX_Link(_) ^(s)]].
  parterm[[DNX_Cont(_) ^(s)]].
  
  partermMap [[ [] ^(s)]].
  partermMap [[ [h|t] ^(s)]] :=
    parterm [[h ^(s)]], partermMap [[t ^(s) ]].
  
rules // Expression terms
  expterm[[DNXTerm_Var(name) ^(s)]] :=
    Var{name} -> s,
    Var{name} |-> d | error $[Variable [name] not defined] @name.
    
  expterm[[DNXTerm_List(elems) ^(s)]] :=
    exptermMap [[elems ^(s)]].
    
  expterm[[DNXTerm_Tuple(elems) ^(s)]] :=
    exptermMap [[elems ^(s)]].
    
  expterm[[DNXTerm_ListTail(elems, tail) ^(s)]] :=
    exptermMap [[elems ^(s)]],
    expterm [[tail ^(s)]].
    
  expterm[[DNXTerm_ListLast(init, last) ^(s)]] :=
    exptermMap [[last ^(s)]],
    expterm [[init ^(s)]].
    
  expterm[[DNXTerm_Pat(name, args) ^(s)]] :=
    exptermMap [[args ^(s)]].
  
  expterm[[term@DNXTerm_At(pattern, DNXTerm_Var(name)) ^(s)]] :=
    Var{name} -> s,
    Var{name} |-> d | error $[Variable [name] not defined] @name.
    
  expterm[[term@DNXTerm_At(pattern, var) ^(s)]] :=
    false | error $[[var] must be a variable] @ term.
    
  expterm[[term@DNXTerm_Type(pattern, type) ^(s)]] :=
    false | error $[Unsupported operation] @ term.
    
  expterm[[DNXTerm_Int(_) ^(s)]].
    
  expterm[[DNXTerm_String(_) ^(s)]].
  expterm[[DNX_Link(_) ^(s)]].
  expterm[[DNX_Cont(_) ^(s)]].
  
  expterm[[term@DNXTermOp_Add(l, r) ^(s)]] :=
    expterm[[l ^(s)]],
    expterm[[r ^(s)]].
    
  expterm[[term@DNXTermOp_Sub(l, r) ^(s)]] :=
    expterm[[l ^(s)]],
    expterm[[r ^(s)]].
  
  exptermMap [[ [] ^(s)]].
  exptermMap [[ [h|t] ^(s)]] :=
    expterm [[h ^(s)]], 
    exptermMap [[t ^(s)]].
  
    

rules // Instructions
  Fold1C(X) [[ [DNX_Return(arg)] ^(s, s', p) ]] :=
    s == s',
    exp [[arg ^(s, p)]].
    
  Fold1C(X) [[ [DNX_Return(arg) | tail] ^(s, s', p) ]] :=
    exp [[arg ^(s, p)]],
    Fold1C(instr) [[tail ^(s, s', p)]],
    false | error $[Dead code] @tail.
    
  Fold1C(X) [[ [h] ^(s, s', p) ]] :=
    X[[ h ^(s, s', p)]].
    
  Fold1C(X) [[ [h | t] ^(s, s', p) ]] :=
    X[[ h ^(s, s2, p) ]],
    Fold1C(X)[[ t ^(s2, s', p) ]].
  
  ctInstr [[ DNX_DefineVar(name) ^(s, p) ]] :=
    Var{name} <- s.
  
  ctInstr [[ DNX_Bind(name, exp) ^(s, p) ]] :=
    exp [[exp ^(s, p)]],
    Var{name} <- s,
    distinct/name D(s)/Var | error $[Duplicate compile time binding] @NAMES.
  
  instr [[ DNX_BindExp(name, exp) ^(s, def_s, p) ]] :=
    exp [[exp ^(s, p)]],
    new def_s,
    def_s ---> s,
    Var{name} <- def_s.
  
  instr [[ DNX_BindExpSplice(name, exp) ^(s, s2, p) ]] :=
    s == s2,
    exp [[exp ^(s, p)]],
    Var{name} -> p,
    Var{name} |-> d | error $[[name] not declared] @ name.
    
  instr [[ DNX_Exp(exp) ^(s, s', p) ]] :=
    s == s', 
    exp[[exp ^(s, p)]].
     
rules // Expressions  
  exp [[DNX_Link(lbl) ^(s, _) ]] :=
    Link{lbl} -> s,
    Link{lbl} |-> d | error $[Link with label [lbl] is not defined].
  
  exp [[DNX_Cont(lbl) ^(s, _) ]] :=
    Cont{lbl} -> s,
    Cont{lbl} |-> d | error $[Continuation with label [lbl] is not defined].
    
  exp [[DNX_Var(name) ^(s, _) ]] :=
    Var{name} -> s,
    Var{name} |-> d | error $[Variable [name] not declared] @name.
    
  exp [[DNX_Call(name, param, args) ^(s, p) ]] :=
    Def{name} -> s,
    Map2(exp) [[args ^(s, p)]],
    Map1(expParam) [[param ^(s)]].
     
  exp [[DNX_Quote(Block(instrs)) ^(s, p)]] :=
    new quote_s, quote_s ---> p,
    Fold1C(instr) [[instrs ^(quote_s, _, s)]].
    
  exp [[DNX_Splice(DNX_Var(name)) ^(s, p) ]] :=
    Var{name} -> p,
    Var{name} |-> d | error $[Variable [name] not declared] @name.
    
  exp [[DNX_Term(term) ^(s, _) ]] := expterm [[term ^(s)]].
  
  expParam [[name ^(s)]] :=
    Def{name} -> s.
  
  
  