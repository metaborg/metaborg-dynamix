module analysis/definitions

imports

  analysis/common

rules

  primNames[[ name@"empty" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [TermT(), ExpT()], InstrT()) !.

  primNames[[ name@"push" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT(), ExpT()], InstrT()) !.
  
  primNames[[ name@"pop" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT()], ExpT()) !.

  primNames[[ name@"tick" ^(s)]] :=
    false | warning $[This is a benchmarking extension of the Frame VM] @name,
    Def{name} <- s,
    Def{name} : DefT([], [], InstrT()) !.

  primNames[[ name@"tock" ^(s)]] :=
    false | warning $[This is a benchmarking extension of the Frame VM] @name,
    Def{name} <- s,
    Def{name} : DefT([], [], InstrT()) !.
    
  primNames[[ name@"print" ^(s)]] :=
    false | warning $[You should use printc for printing to the console] @name,
    Def{name} <- s,
    Def{name} : DefT([], [ExpT()], InstrT()) !.
  
  primNames[[ name@"debug" ^(s)]] :=
    false | note $[Debug instruction] @name,
    Def{name} <- s.
  
  primNames[[ name@"debug-state" ^(s)]] :=
    false | note $[Debug instruction] @name,
    Def{name} <- s.

  primNames[[ name@"printc" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT()], InstrT()) !.

   primNames[[ name@"jump" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT()], InstrT()).
    
  primNames[[ name@"jumpz" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT(), ExpT(), ExpT()], InstrT()).
//    then <sub? CodeT(),
//    then == else | error $[Both branches in the jump should have the same type].
    // m == then meet else, m != CodeT()
    // out_mult is mulOrd.lub of (e1_mult,e2_mult),

  primNames[[ name@"callC" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT()], InstrT()) !.

  primNames[[ name@"curCF" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [], ExpT()) !.

  primNames[[ name@"curC" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT()], ExpT()) !.

  primNames[[ name@"newCF" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT(), ExpT(), ExpT()], ExpT()) !.

  primNames[[ name@"newC" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT(), ExpT(), ExpT()], ExpT()) !.

  primNames[[ name@"getC" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT(), TermT()], ExpT()) !.

  primNames[[ name@"setC" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT(), TermT(), ExpT()], InstrT()) !.

  primNames[[ name@"unpackCF" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT()], ExpT()) !.

  primNames[[ name@"unpackC" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT()], ExpT()) !.


  primNames[[ name@"int" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [TermT()], ExpT()) !.

  primNames[[ name@"char" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [TermT()], ExpT()) !.

  primNames[[ name@"ineg" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT()], ExpT()) !.

  primNames[[ name@"iadd" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT(), ExpT()], ExpT()) !.

  primNames[[ name@"imul" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT(), ExpT()], ExpT()) !.

  primNames[[ name@"isub" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT(), ExpT()], ExpT()) !.

  primNames[[ name@"idiv" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT(), ExpT()], ExpT()) !.

  primNames[[ name@"imod" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT(), ExpT()], ExpT()) !.

  primNames[[ name@"ieq" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT(), ExpT()], ExpT()) !.

  primNames[[ name@"ilt" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT(), ExpT()], ExpT()) !.

  primNames[[ name@"igt" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT(), ExpT()], ExpT()) !.

  primNames[[ name@"ior" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT(), ExpT()], ExpT()) !.

  primNames[[ name@"iand" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT(), ExpT()], ExpT()) !.

  primNames[[ name@"ixor" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT(), ExpT()], ExpT()) !.


  primNames[[ name@"is-int" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT()], ExpT()) !.

  primNames[[ name@"is-frame" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT()], ExpT()) !.

  primNames[[ name@"is-CF" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT()], ExpT()) !.

  primNames[[ name@"is-continuation" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT()], ExpT()) !.


  primNames[[ name@"new" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT()], ExpT()) !.

  primNames[[ name@"size" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT()], ExpT()) !.

  primNames[[ name@"link" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT(), TermOrExpT(), TermT()], InstrT()) !.

  primNames[[ name@"set" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT(), TermOrExpT(), ExpT()], InstrT()) !.

  primNames[[ name@"mkcur" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT()], InstrT()) !.

  primNames[[ name@"cur" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [], ExpT()) !.

  primNames[[ name@"get" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT(), TermOrExpT()], ExpT()) !.

  primNames[[ name@"is-empty" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [ExpT(), TermT()], ExpT()) !.

  primNames[[ name@"resolve" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [TermT(), TermT()], TermT()) !.

  primNames[[ name@"resolve-scope" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [TermT(), TermT()], TermT()) !.
    
  primNames[[ name@"length" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [TermT()], TermT()) !.
    
  primNames[[ name@"associate-index" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [TermT(), TermT(), TermT()], InstrT()) !.
    
  primNames[[ name@"nop" ^(s)]] :=
    Def{name} <- s,
    Def{name} : DefT([], [], InstrT()) !.
