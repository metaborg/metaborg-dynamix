module analysis/common
  
signature
    namespaces Def Var Link Cont Module
    
    sorts Type
    constructors
     ExpT   : Type		// TODO extend this with the type inside the expression
     InstrT : Type
     TermT  : Type
     DefT   : Type * list(Type) * Type -> Type
     TermOrExpT : Type
          
     ReturnT: Type
     CodeT : Type
     
     ParamT: list(Type) * Type -> Type
     
    
    relations
     reflexive, transitive, anti-symmetric sub : Type * Type {
      [+sub]
     }
     
rules
  initTypes [[ _ ^(_) ]] :=
  	TermT()  <sub! TermOrExpT(),
  	ExpT()   <sub! TermOrExpT(),
  	ReturnT() <sub! InstrT().
