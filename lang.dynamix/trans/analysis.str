module analysis

imports
  nabl2/runtime/analysis/constraint-compat
  nabl2/api
  nabl2/runtime

  analysis/static-semantics
  signatures/Dynamix-sig
  codegen/dnx-common
  
rules // Analysis
  desugar = collect-def-types; collect-prim-names; remove-prim-calls; desugar-call-params-all
  editor-analyze = nabl2-analyze(desugar)

rules // Debugging
  // Prints the abstract syntax ATerm of a selection.
  debug-show-aterm: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"aterm")> path
       ; result   := selected
  
  debug-show-desugared-aterm: (_, _, ast, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"desuagered.aterm")> path
       ; result   := <desugar> ast
       
  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  debug-show-analyzed: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"analyzed.aterm")> path
       ; result   := selected

rules
  desugar-call-params-all: mod -> <topdown(try(desugar-call-params))> mod
  
  desugar-call-params: Def(name, None(), args, body) -> Def(name, [], args, body)
  desugar-call-params: Def(name, Some(Param(params)), args, body) -> Def(name, params, args, body)
  
  desugar-call-params: DNX_Call(name, None(), args) -> DNX_Call(name, [], args)
  desugar-call-params: DNX_Call(name, Some(Param(params)), args) -> DNX_Call(name, params, args)
  
  desugar-call-params: TypeDef(name, None(), argsty, retty) -> TypeDef(name, [], argsty, retty)
  desugar-call-params: TypeDef(name, Some(ParamTypeList(params)), argsty, retty) -> TypeDef(name, params, argsty, retty)
  
  collect-def-types: Module(name, imports, defs) -> Module(name, imports, [], Defs(type_decls), Defs(def_decls), candl)
    where
      candl := [DNX_Link("P"), DNX_Link("I"), DNX_Cont("ret"), DNX_Cont("exc"), DNX_Cont("next")];
      all_defs := <mapconcat((\ Defs(d) -> d \))> defs;
      def_decls  := <filter(?Def(_, _, _, _))> all_defs;
      type_decls := <filter(?TypeDef(_, _, _, _))> all_defs
      
      
  collect-prim-names: Module(name, imports, _, types, defs, candl) -> Module(name, imports, prim_names, types, defs, candl)
    where
      prim_names := <collect-all((\DNX_CallPrim(name, param, args) -> name\))>
      
  remove-prim-calls = topdown(try((\DNX_CallPrim(name, param, args) -> DNX_Call(name, param, args)\)))
