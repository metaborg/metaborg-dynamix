module dnx-compile

imports
  signatures/Dynamix-sig
  codegen/dnx-common
  
  codegen/fvm-primitive
  codegen/dnx-primitive
  codegen/dnx-match
  codegen/dnx-instruction
    
rules
  // Compile an AST using a compiled Dynamix specification
  // If the Dynamix specification is None(), an error is returned
  // The output of this rule is either a tuple (header, instructions) that can be convered to a FVM AST
  // or a list of errors when the AST could not be converted
  dnx-compile: (source_ast, Some(dnx-module)) -> out
    with
      NormModule(name, header, defs) := dnx-module;
      <debug(!"[Dynamix] ")> "Started compile";
      <map(dnx-store-def)> defs;
      blocks := <new-hashtable>;
      properties := <new-hashtable>;
      DNX_Header(_, _, namespaces, _) := header;

      // This is not nice, but it works
      <hashtable-put(|"namespaces", namespaces)> properties;
      // Call the initial eval rule with the AST as argument
      (instr, err) := <dnx-call(|"eval", [], properties, blocks)> [source_ast];

      compiled_header := <dnx-primitive-mk-header> header;
      
      // Get all the quoted blocks and make them proper blocks
      blocks_instr := <hashtable-getlist; map((\ (label, body) -> [label | body] \)); concat> blocks;
      body2 := <conc> (instr, blocks_instr);
      
      // Some labels are still unbound. Replace these temporary binds with the actual bind
      tmp_labels := <hashtable-getlist; filter( 
          (\ (key, val) -> <debug> (val, bound_val) 
            where 
              bound_key := <string-starts-with(|"tmp_lbl_"); string-replace(|"tmp_lbl_", "lbl_")> key
            with
              bound_val := <hashtable-get(|bound_key)> properties
          \) )> properties;
      body3 := <foldl(replace-all-in)> (tmp_labels, body2); 
      out := <dnx-mk-final-output; print-compile-finished-debug> (compiled_header, body3, err)
  
  // If there was no Dynamix spec, just throw an error
  dnx-compile: (_, None()) -> [DNX_Error(error)]
    where
      error := <debug(!"[Dynamix] ")> "No Dynamix specification loaded! Compiling failed"

rules
  // Print whether the compilation finished with or without errors
  // If we get a tuple it was succesful, if we get a list there was at least 1 error
  print-compile-finished-debug: e -> e
    with <debug(!"[Dynamix] ")> $[Compilation finished with[<(is-list; !"") <+ !"out"> e] errors]
  
rules
  // Given a tuple of a header, a list of instructions and a possible error
  // return a list of errors or a tuple of a header and a list of instructions without any errors
  dnx-mk-final-output: (header, instr, None()) -> out
    where
      errors := <collect-all(?(DNX_Error(_)))> instr;
      // If there are errors, show them. Otherwise output (header, instr)
      out := <?(e, i); !e; length; ?(l); !(l, 0); ((gt; !e) <+ !(header, i))> (errors, instr)
      
  dnx-mk-final-output: (header, instr, err@DNX_Error(_)) -> [err]

rules
  // Given a compiled Dynamix rule, add a getter for the rule        
  dnx-store-def =
    ?DefGroup(name, defs)
    ; rules( dnx-get-defs-by-name: name -> defs )
    
  // Call a rule in the Dynamix spec with some arguments
  // Defname is the name of the rule to call, param is an optional call-parameter, properties and blocks are the shared blocks with additional information required for compilation
  //
  // The result of a call is a tuple of a list of instructions and an expression (Paths and other terms result in an empty list and the path/term)
  // The output expression of a call is always a reference to a register if the result was an expression
  // The optimizer could inline these again in a later stage, but it makes sure we dont duplicate execution steps
  dnx-call(|defname, param, properties, blocks): args -> out
    with
      out := <dnx-call-(|defname, param, properties, blocks); call-out-to-register> args
      
  // If a call returns an expression which is not a register, put it in a register
  call-out-to-register: e@(instr, None()) -> e
  call-out-to-register: e@(instr, exp) -> (<conc> (instr, a_instr), new_var) where <not(dnx-primitive-is-var); dnx-primitive-is-exp> exp
    with
      new_var := <newname; dnx-primitive-autovar> "exp";
      (a_instr, None()) := <dnx-primitive-assign> (new_var, exp)
  call-out-to-register: e -> e
  
  // Internal call function for non-primitive calls. Does the actual call, but not the result checking/conversion to registers
  dnx-call-(|defname, param, properties, blocks): args -> out
    where
      // If it is a rule from the Dynamix spec
      defs := <dnx-get-defs-by-name> defname
    with
      // Get the first rule case that matches with the given arguments
      match := <getfirst(dnx-match-rule(|args, param)) <+ !None()> defs;
      // Substitute all the arguments from the match into the body of the rule
      bound_body := <dnx-unpack-match(|defname, args)> match;
      out := <dnx-compile-body(|properties, blocks)> bound_body
      
  // Internal call function for primitive calls. Does the actual call, but not the result checking/conversion to registers
  dnx-call-(|primname, param, properties, blocks): args -> out
    where
      [] := param	// Primitives cannot have a param
    with
      out := <dnx-primitive-call(|properties) <+ (!${Missing primitive implementation for {<write-to-string> primname}}; debug(!"[Dynamix] "); fail)> (primname, args)

rules
  // If the match produced a Some, just unpack it
  // Otherwise Create a nice error message that we cannot match the given AST to the given rule
  dnx-unpack-match(|defname, ast): Some(a) -> a
  dnx-unpack-match(|defname, ast): None() -> DNX_Error(error)
    where      
      rule_name_str := <write-to-string> defname;
      ast_str := <strip-annos; topdown(try(dnx-primitive-is-var; !Exp())); write-to-string> ast;
      ast_type_str := <map(((\ ast -> type  where 
      	a := <nabl2-get-ast-analysis> ast;
      	type := <nabl2-get-ast-type(|a)> ast
      \); strip-annos; write-to-string) <+ !"_")> ast;
      error := <debug(!"[Dynamix] ")> ${Could not match the following arguments with the rule {rule_name_str}: {ast_str}:{ast_type_str}}
