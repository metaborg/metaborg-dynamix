module dnx-compile

imports
  signatures/Dynamix-sig
  codegen/dnx-common
  
  codegen/fvm-primitive
  codegen/dnx-primitive
  codegen/dnx-match
  codegen/dnx-instruction
    
rules
  dnx-compile: (source_ast, Some(dnx-module)) -> out
    with
      NormModule(name, candl, defs) := dnx-module;
      <map(dnx-store-def)> defs;
      // TODO this could result in a match failure, we should handle this case
      (instr, err) := <dnx-call(|"eval", [])> [source_ast];
      compiled_header := <dnx-primitive-mk-header> candl;
      out := <dnx-mk-final-output> (compiled_header, instr, err)
      
  dnx-mk-final-output: (header, instr, None()) -> out
    where
      errors := <collect-all(?(MatchError(_)))> instr;
      // If there are errors, show them. Otherwise output (header, instr)
      out := <?(e, i); !e; length; ?(l); !(l, 0); ((gt; !e) <+ !(header, i))> (errors, instr)
      
  dnx-mk-final-output: (header, instr, err@MatchError(_)) -> [err]
      
  dnx-compile: _ -> <debug(!"[Dynamix] "); fail> "No Dynamix specification loaded! Compiling failed"

rules          
  dnx-store-def =
    ?DefGroup(name, defs)
    ; rules( dnx-get-defs-by-name: name -> defs )
    
  dnx-call(|defname, param): args -> out
    where
      defs := <dnx-get-defs-by-name> defname
    with
      match := <getfirst(dnx-match-rule(|args, param)) <+ !None()> defs;
      bound_body := <dnx-compile-get-out(|defname, args)> match;
      out := <dnx-compile-body> bound_body
      
  // Primitive
  dnx-call(|primname, param): args -> out
    where
      [] := param
    with
      out := <dnx-primitive-call <+ (!${[Dynamix] Missing primitive implementation for '{<write-to-string> primname}'}; debug; fail)> (primname, args)
        
  dnx-compile-get-out(|defname, ast): Some(a) -> a
  dnx-compile-get-out(|defname, ast): None() -> MatchError(error)
    where
      ast' := ast; 
      error := <debug(!"[Dynamix] ")> ${Could not match the following arguments with the rule {<write-to-string> defname}: {<strip-annos; topdown(try(dnx-primitive-is-var; !Exp())); write-to-string> ast}}
