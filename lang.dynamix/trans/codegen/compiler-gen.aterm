Module(
  "compiler-gen"
, [ Imports([Import("signatures/Dynamix-sig"), Import("Stratego-Sugar-in-Stratego"), Import("pp")])
  , Rules(
      [ RDefNoArgs(
          "generate-compiler"
        , Rule(
            NoAnnoList(
              Tuple(
                [Wld(), Wld(), Var("ast"), Var("path"), Var("project-path")]
              )
            )
          , NoAnnoList(Tuple([Var("filename"), Var("result")]))
          , [ WithClause(
                Seq(
                  Assign(
                    Var("filename")
                  , App(
                      CallT(SVar("guarantee-extension"), [], [NoAnnoList(Str("\"dnx.str.aterm\""))])
                    , Var("path")
                    )
                  )
                , Seq(
                    Assign(
                      Var("fname")
                    , App(
                        Seq(CallNoArgs(SVar("base-filename")), CallNoArgs(SVar("remove-extension")))
                      , Var("path")
                      )
                    )
                  , Assign(
                      Var("result")
                    , App(
                        CallT(SVar("dnx-to-str"), [], [Var("fname")])
                      , Var("ast")
                      )
                    )
                  )
                )
              )
            ]
          )
        )
      , RDefT(
          "dnx-to-str"
        , []
        , [DefaultVarDec("fname")]
        , Rule(
            NoAnnoList(Op("DNX_Spec", [Var("rles")]))
          , ToTerm(
              RDefNoArgs(
                "compile-to-fvm"
              , Rule(
                  Var("ast")
                , Var("ast'")
                , [ WithClause(
                      Seq(
                        BA(CallNoArgs(SVar("dnx-init-maps")), Var("ast"))
                      , Seq(
                          BA(CallNoArgs(SVar("dnx-set-slot-namespaces")), Var("namespaces"))
                        , Seq(
                            Assign(Var("initial_scope_size"), NoAnnoList(Int("1")))
                          , Assign(
                              Var("header")
                            , NoAnnoList(
                                List(
                                  [ NoAnnoList(
                                      Op(
                                        "FVM_InitSize"
                                      , [App(CallNoArgs(SVar("int-to-string")), Var("initial_scope_size"))]
                                      )
                                    )
                                  , NoAnnoList(
                                      Op(
                                        "FVM_ContAlias"
                                      , [ NoAnnoList(Op("FVM_Cont", [NoAnnoList(Str("\"n\""))]))
                                        , NoAnnoList(Str("\"1\""))
                                        ]
                                      )
                                    )
                                  , NoAnnoList(
                                      Op(
                                        "FVM_LinkAlias"
                                      , [ NoAnnoList(Op("FVM_Link", [NoAnnoList(Str("\"Q\""))]))
                                        , NoAnnoList(Str("\"1\""))
                                        ]
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  , WithClause(
                      Seq(
                        Assign(
                          Var("flat_ast")
                        , App(CallNoArgs(SVar("compile-init")), Var("ast"))
                        )
                      , Assign(
                          Var("ast'")
                        , App(
                            Seq(
                              CallNoArgs(SVar("rgr-from-flat"))
                            , Seq(CallNoArgs(SVar("dnx-allocate-registers")), CallNoArgs(SVar("dnx-validate")))
                            )
                          , NoAnnoList(
                              Tuple(
                                [NoAnnoList(Op("FVM_Header", [Var("header")])), Var("flat_ast")]
                              )
                            )
                          )
                        )
                      )
                    )
                  ]
                )
              )
            )
          , [ WithClause(
                Assign(
                  Var("namespaces")
                , NoAnnoList(List([NoAnnoList(Str("\"Var\""))]))
                )
              )
            ]
          )
        )
      ]
    )
  ]
)