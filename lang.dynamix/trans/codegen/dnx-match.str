module dnx-match

imports
  signatures/Dynamix-sig
  nabl2/api
  nabl2/shared/-
  nabl2/runtime/analysis/-
  
  codegen/dnx-common
  codegen/fvm-primitive
  
rules
  // Match the given arguments with the definition case.
  // If it could not be matched, the strategy fails.
  dnx-match-rule(|args, a_params): DefCase(arg_patterns, d_params, body, k) -> Some((binds', zipped_params, body'))
    where
      zipped := <zip> (args, arg_patterns);
      zipped_params := <zip> (d_params, a_params);
      binds := <mapconcat(dnx-match-arg)> zipped;
      (binds', body') := <dnx-match-k(|binds, body)> k

rules
  // Rules for matching definitioncase constructions.
  // If they match, the bindings are extended. Otherwise the rule fails.
  // When none of the rules succeeds the arguments could not be matched
  
  
  // Match the var@PATTERN construction.
  // Propagates the rhs and adds the entire thing as a binding.
  dnx-match-arg: (arg, DNXTerm_At(DNXTerm_Var(var), pattern)) -> [(var, arg) | binds]
    where
      binds := <dnx-match-arg> (arg, pattern)
  
  // Match the type of a pattern
  dnx-match-arg: (arg, DNXTerm_Type(pattern, type)) -> binds
    where
      // Lookup the type of the argument
      a := <nabl2-get-ast-analysis> arg;
      arg_type := <nabl2-get-ast-type(|a)> arg;
      
      // Match the type and propagate the argument matching
      _ := <dnx-match-arg> (arg_type, type);
      binds := <dnx-match-arg> (arg, pattern)
  
  // Match a constructor by comparing its name and match its children
  dnx-match-arg: (arg, DNXTerm_Pat(p_name, p_args)) -> binds
    where
      (a_name, a_args) := <explode-term> arg;
      <equal> (a_name, p_name);
      <equal> (<length> a_args, <length> p_args);
      
      zipped := <zip> (a_args, p_args);
      binds := <mapconcat(dnx-match-arg)> zipped
  
  // Match a wildcard. This matches everything, but does not introduce a binding.
  dnx-match-arg: (arg, DNXTerm_Var(name)) -> []
    where
      <string-starts-with(|"_"); string-ends-with(|"_")> name // Check if wildcard
      
  // Match a variable. This matches everything and binds it.
  dnx-match-arg: (arg, DNXTerm_Var(name)) -> [(name, arg)]
  
  // Match a string.
  dnx-match-arg: (arg, DNXTerm_String(string)) -> []
    where
      <is-string> arg;
      <equal> (<strip-annos> arg, string)

  // Match an integer
  dnx-match-arg: (arg, DNXTerm_Int(val)) -> []
    where
      <is-int> arg;      
      <equal> (<strip-annos> arg, <string-to-int> val)
  
  // Match a list and al elements in the list
  dnx-match-arg: (arg, DNXTerm_List(elems)) -> binds
    where
      <is-list> arg; <equal> (<length> elems, <length> arg);
      binds :=  <zip; mapconcat(dnx-match-arg)> (arg, elems)
  
  // Match a tuple and all elements inside
  dnx-match-arg: (arg, DNXTerm_Tuple(elems)) -> binds
    where
      <is-tuple> arg; tuple := <TupleToList> arg;
      <equal> (<length> elems, <length> tuple);
      binds :=  <zip; mapconcat(dnx-match-arg)> (tuple, elems)
  
  // Match the first elements from a list and its tail
  dnx-match-arg: (arg, DNXTerm_ListTail(elems, tail)) -> binds
    where
      <is-list> arg; <geq> (<length> arg, <length> elems);
      binds := <dnx-match-list-tail> (arg, <concat> [elems, [tail]])
      
  dnx-match-arg: (arg, e) -> <fail> // No match found
//  dnx-match-arg: (arg, e) -> <debug(!"Fail: "); fail> (arg, e)
  
rules
  dnx-match-k(|binds, body): None() -> (binds, body)
  dnx-match-k(|binds, body): Some( (name, Some(exp)) ) -> ([(name, lbl) | binds], <conc> (body, [lbl, DNX_Return(exp)]))
    with
      lbl := <string-replace(|"-", "_"); string-replace(|"'", "_"); newname; dnx-primitive-autolabel> name
  dnx-match-k(|binds, body): Some( (name, None()) ) -> ([(name, lbl) | binds], <conc> (body, [lbl]))
    with
      lbl := <string-replace(|"-", "_"); string-replace(|"'", "_"); newname; dnx-primitive-autolabel> name
      
      
rules
  // Match arguments in a list with a second list.
  // This second list is at most as long as the first list.
  // The remaining part/tail of the first list is matched with the last element in the second list.
  dnx-match-list-tail: (list, [pattern]) -> <dnx-match-arg> (list, pattern)
  dnx-match-list-tail: ([ah | at], [ph | pt]) -> 
    <concat> [<dnx-match-arg> (ah, ph), <dnx-match-list-tail> (at, pt)]
