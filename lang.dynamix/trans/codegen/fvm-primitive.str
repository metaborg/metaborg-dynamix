module fvm-primitive

imports
  signatures/fvm-roger-sig
  signatures/fvm-common-sig
  signatures/Dynamix-sig

rules
  fvm-convert-path: DNX_Path([]) -> FVM_Self()
  fvm-convert-path: DNX_Path(path) -> FVM_Path(<map(to-fvm-path)> path)
  
  to-fvm-path: label -> FVM_Link(label)                where <is-string> label
  to-fvm-path: slot  -> FVM_Slot(<int-to-string> slot) where <is-int>    slot
  
rules
  dnx-primitive-cont-label: name -> FVM_Cont(name)
  dnx-primitive-link-label: name -> FVM_Link(name)
  dnx-primitive-assign: (var, val) -> ([RGR_Assign(var, val)], None())
  dnx-primitive-int-constant: n -> RGR_IntVal(n)
  dnx-primitive-mk-label: name -> FVM_Label(name)
  dnx-primitive-mk-header: items -> FVM_Header(<map(dnx-primitive-mk-header-item)> items)
    with
      <set-counter> ("link", -1);
      <set-counter> ("cont", 1)	// Already 2 continuations pre-allocated
      
  dnx-primitive-mk-header-item: DNX_Link(label) -> FVM_LinkAlias(FVM_Link(label), <int-to-string> <next-counter> "link")
  dnx-primitive-mk-header-item: DNX_Cont(name@"ret")  -> FVM_ContAlias(FVM_Cont(name), "0")
  dnx-primitive-mk-header-item: DNX_Cont(name@"exc")  -> FVM_ContAlias(FVM_Cont(name), "1")
  dnx-primitive-mk-header-item: DNX_Cont(name)  -> FVM_ContAlias(FVM_Cont(name), <int-to-string> <next-counter> "cont")


rules // Expressions
  dnx-primitive-call: ("pop", [e1]) -> ([], RGR_ContRGet(e1))
  dnx-primitive-call: ("curCF", []) -> ([], RGR_ContThis())
  dnx-primitive-call: ("newCF", [e1, e2, e3]) -> ([], RGR_ContNew(e1, e2, e3))
  dnx-primitive-call: ("getCF", [e1, e2]) -> ([], RGR_ContGet(e1, e2))
  dnx-primitive-call: ("unpackCF", [e1]) -> ([], RGR_ContUnpack(e1))
  
  dnx-primitive-call: ("char", [c]) -> ([], RGR_CharLoad(c))
  dnx-primitive-call: ("int", [n]) -> ([], RGR_ILoad(<string-to-int; int-to-string> n))
  dnx-primitive-call: ("ineg", [e1]) -> ([], RGR_INeg(e1))
  dnx-primitive-call: ("iadd", [e1, e2]) -> ([], RGR_IAdd(e1, e2))
  dnx-primitive-call: ("imul", [e1, e2]) -> ([], RGR_IMul(e1, e2))
  dnx-primitive-call: ("isub", [e1, e2]) -> ([], RGR_ISub(e1, e2))
  dnx-primitive-call: ("idiv", [e1, e2]) -> ([], RGR_IDiv(e1, e2))
  dnx-primitive-call: ("imod", [e1, e2]) -> ([], RGR_IMod(e1, e2))
  dnx-primitive-call: ("ieq",  [e1, e2]) -> ([], RGR_IEq(e1, e2))
  dnx-primitive-call: ("ilt",  [e1, e2]) -> ([], RGR_ILt(e1, e2))
  dnx-primitive-call: ("igt",  [e1, e2]) -> ([], RGR_IGt(e1, e2))
  dnx-primitive-call: ("ior",  [e1, e2]) -> ([], RGR_IOr(e1, e2))
  dnx-primitive-call: ("ixor", [e1, e2]) -> ([], RGR_IXor(e1, e2))
  dnx-primitive-call: ("iand", [e1, e2]) -> ([], RGR_IAnd(e1, e2))
  
  dnx-primitive-call: ("is-int",   [e1]) -> ([], RGR_IsInt(e1))
  dnx-primitive-call: ("is-frame", [e1]) -> ([], RGR_IsFrame(e1))
//  dnx-primitive-call: ("is-closure", [e1]) -> ([], RGR_IsClosure(e1))
  dnx-primitive-call: ("is-continuation", [e1]) -> ([], RGR_IsCont(e1))
  
  dnx-primitive-call: ("new",  [e1]) -> ([], RGR_New(e1))
  dnx-primitive-call: ("size", [e1]) -> ([], RGR_FSize(e1))
  dnx-primitive-call: ("get",  [e1, e2]) -> ([], RGR_Get(e1, <fvm-convert-path> e2))
  dnx-primitive-call: ("is-empty", [e1, e2]) -> ([], RGR_IsEmpty(e1, e2))
  dnx-primitive-call: ("cur", []) -> ([], RGR_ScopeGetCurrent())
  
rules // Statements
  stmt: instrs -> (<map( (\ instr -> RGR_Stmt(instr) \) )> instrs, None())
  control: instr -> ([instr], None())
  
  dnx-primitive-call: ("link", [e1, e2, e3]) -> <stmt> [RGR_Link(e1, <try(fvm-convert-path)> e2, e3)]
  dnx-primitive-call: ("set", [e1, e2, e3]) -> <stmt> [RGR_Set(e1, <fvm-convert-path> e2, e3)]
  dnx-primitive-call: ("empty", [e1, e2]) -> <stmt> [RGR_Empty(e1, e2)]
  dnx-primitive-call: ("push", [e1, e2]) -> <stmt> [RGR_ContTransfer([e1], e2)]
  dnx-primitive-call: ("setCF", [e1, e2, e3]) -> <stmt> [RGR_ContSet(e1, e2, e3)]
  dnx-primitive-call: ("mkcur", [e1]) -> <stmt> [RGR_ScopeSetCurrent(e1)]
  dnx-primitive-call: ("print", [e1]) -> <stmt> [RGR_Print(e1)]
  dnx-primitive-call: ("printc", [e1]) -> <stmt> [RGR_PrintChar(e1)]
  
  dnx-primitive-call: ("jump", [e1]) -> <control> RGR_Jump(e1)
  dnx-primitive-call: ("jumpz", [e1, e2, e3]) -> <control> RGR_JumpZ(e1, e2, e3)
  dnx-primitive-call: ("callCF", [e1, e2]) -> <control> RGR_ContCall(e1, e2)
  dnx-primitive-call: ("returnCF", [e1]) -> <control> RGR_ContReturn(e1)
 