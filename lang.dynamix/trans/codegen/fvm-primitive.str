module fvm-primitive

imports
  signatures/fvm-roger-sig
  signatures/fvm-common-sig
  signatures/Dynamix-sig
  
  fvm-common
  codegen/dnx-common

rules
  fvm-convert-path: [] -> FVM_Self()
  fvm-convert-path: path -> FVM_Path(<map(try(is-int; int-to-string))> path) where <is-list> path
  
rules
  dnx-primitive-autovar: name -> RGR_AutoVar(name)
  dnx-primitive-autolabel: name -> FVM_AutoLabel(name)
  dnx-primitive-autosize: _ -> FVM_AutoSize()
  dnx-primitive-is-var: RGR_AutoVar(name) -> name
  dnx-primitive-is-label: FVM_AutoLabel(name) -> name
  dnx-primitive-is-exp: exp -> exp where (name, _) := <explode-term> exp; <string-starts-with(|"RGR_") <+ string-starts-with(|"FVM_") > name  // Technically not correct, but good enough
  dnx-primitive-cont-label: name -> FVM_Cont(name)
  dnx-primitive-link-label: name -> FVM_Link(name)
  dnx-primitive-assign: (var, val) -> ([RGR_Assign(var, val)], None())
  dnx-primitive-int-constant: n -> RGR_IntVal(n)
  dnx-primitive-mk-label: name -> FVM_Label(name)
  dnx-primitive-mk-header: DNX_Header(links, continuations, _) -> FVM_Header(<conc> (<map(dnx-primitive-mk-header-link)> links, <map(dnx-primitive-mk-header-cont)> continuations))
      
  dnx-primitive-mk-header-link: (idx, label) -> FVM_LinkAlias(FVM_Link(label), <int-to-string> idx)
  dnx-primitive-mk-header-cont: (idx, name)  -> FVM_ContAlias(FVM_Cont(name), <int-to-string> idx)


rules // Expressions
  dnx-primitive-call(|p): ("pop", [e1]) -> ([], RGR_ContRGet(e1))
  dnx-primitive-call(|p): ("curCF", []) -> ([], RGR_ContThis())
  dnx-primitive-call(|p): ("newCF", [e1, e2, e3]) -> ([], RGR_ContNew(e1, e2, e3))
  dnx-primitive-call(|p): ("getCF", [e1, e2]) -> ([], RGR_ContGet(e1, e2))
  dnx-primitive-call(|p): ("unpackCF", [e1]) -> ([], RGR_ContUnpack(e1))
  
  dnx-primitive-call(|p): ("char", [c]) -> ([], RGR_CharLoad(c))
  dnx-primitive-call(|p): ("int", [n]) -> ([], RGR_ILoad(<string-to-int; int-to-string> n))
  dnx-primitive-call(|p): ("ineg", [e1]) -> ([], RGR_INeg(e1))
  dnx-primitive-call(|p): ("iadd", [e1, e2]) -> ([], RGR_IAdd(e1, e2))
  dnx-primitive-call(|p): ("imul", [e1, e2]) -> ([], RGR_IMul(e1, e2))
  dnx-primitive-call(|p): ("isub", [e1, e2]) -> ([], RGR_ISub(e1, e2))
  dnx-primitive-call(|p): ("idiv", [e1, e2]) -> ([], RGR_IDiv(e1, e2))
  dnx-primitive-call(|p): ("imod", [e1, e2]) -> ([], RGR_IMod(e1, e2))
  dnx-primitive-call(|p): ("ieq",  [e1, e2]) -> ([], RGR_IEq(e1, e2))
  dnx-primitive-call(|p): ("ilt",  [e1, e2]) -> ([], RGR_ILt(e1, e2))
  dnx-primitive-call(|p): ("igt",  [e1, e2]) -> ([], RGR_IGt(e1, e2))
  dnx-primitive-call(|p): ("ior",  [e1, e2]) -> ([], RGR_IOr(e1, e2))
  dnx-primitive-call(|p): ("ixor", [e1, e2]) -> ([], RGR_IXor(e1, e2))
  dnx-primitive-call(|p): ("iand", [e1, e2]) -> ([], RGR_IAnd(e1, e2))
  
  dnx-primitive-call(|p): ("is-int",   [e1]) -> ([], RGR_IsInt(e1))
  dnx-primitive-call(|p): ("is-frame", [e1]) -> ([], RGR_IsFrame(e1))
//  dnx-primitive-call(|p): ("is-closure", [e1]) -> ([], RGR_IsClosure(e1))
  dnx-primitive-call(|p): ("is-continuation", [e1]) -> ([], RGR_IsCont(e1))
  
  dnx-primitive-call(|p): ("new",  [e1]) -> ([], RGR_New(e1))
  dnx-primitive-call(|p): ("size", [e1]) -> ([], RGR_FSize(e1))
  dnx-primitive-call(|p): ("get",  [e1, e2]) -> ([], RGR_Get(e1, <fvm-convert-path> e2))
  dnx-primitive-call(|p): ("is-empty", [e1, e2]) -> ([], RGR_IsEmpty(e1, e2))
  dnx-primitive-call(|p): ("cur", []) -> ([], RGR_ScopeGetCurrent())
  
  dnx-primitive-call(|p): ("mk-closure", [frame, block, slots]) -> ([], RGR_ClosNew(frame, block, slots))
  dnx-primitive-call(|p): ("closure-to-CF", [clos]) -> ([], RGR_ClosToCont(clos))
  
rules // Statements
  stmt: instrs -> (<map( (\ instr -> RGR_Stmt(instr) \) )> instrs, None())
  control: instr -> ([instr], None())
  
  dnx-primitive-call(|p): ("link", [e1, e2, e3]) -> <stmt> [RGR_Link(e1, <try(fvm-convert-path)> e2, e3)]
  dnx-primitive-call(|p): ("set", [e1, e2, e3]) -> <stmt> [RGR_Set(e1, <fvm-convert-path> e2, e3)]
  dnx-primitive-call(|p): ("empty", [e1, e2]) -> <stmt> [RGR_Empty(e1, e2)]
  dnx-primitive-call(|p): ("push", [e1, e2]) -> <stmt> [RGR_ContTransfer([e1], e2)]
  dnx-primitive-call(|p): ("setCF", [e1, e2, e3]) -> <stmt> [RGR_ContSet(e1, e2, e3)]
  dnx-primitive-call(|p): ("mkcur", [e1]) -> <stmt> [RGR_ScopeSetCurrent(e1)]
  dnx-primitive-call(|p): ("print", [e1]) -> <stmt> [RGR_Print(e1)]
  dnx-primitive-call(|p): ("printc", [e1]) -> <stmt> [RGR_PrintChar(e1)]
  
  dnx-primitive-call(|p): ("jump", [e1]) -> <control> RGR_Jump(e1)
  dnx-primitive-call(|p): ("jumpz", [e1, e2, e3]) -> <control> RGR_JumpZ(e1, e2, e3)
  dnx-primitive-call(|p): ("callCF", [e1]) -> ([RGR_ContCall(e1, label), label], None()) where label := <newname; dnx-primitive-autolabel> "l_" 
  dnx-primitive-call(|p): ("returnCF", [e1]) -> <control> RGR_ContReturn(e1)
 