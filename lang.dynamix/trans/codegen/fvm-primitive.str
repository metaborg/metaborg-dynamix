module fvm-primitive

imports
  signatures/fvm-roger-sig
  signatures/fvm-common-sig
  signatures/Dynamix-sig
  
  fvm-common
  codegen/dnx-common

rules
  // Convert a generic path to a FVM path
  fvm-convert-path: [] -> FVM_Self()
  fvm-convert-path: path -> FVM_Path(<map(try(fvm-convert-path-elem))> path) where <is-list> path
  
  // Convert an element of a path to a VM path element
  // If its an int, it must be a slot. Otherwise its a link.
  fvm-convert-path-elem: e -> FVM_Slot(<int-to-string> e) where is-int
  fvm-convert-path-elem: e -> FVM_Link(e) where is-string
  
rules
  // Create a fresh register with a given name
  dnx-primitive-autovar: name -> RGR_AutoVar(name)

  // Create a fresh code block label
  dnx-primitive-autolabel: name -> FVM_AutoLabel(name)
  
  // Check if the term is a register reference
  dnx-primitive-is-var: RGR_AutoVar(name) -> name
  
  // Check if the term is a code block label
  dnx-primitive-is-label: FVM_AutoLabel(name) -> name
  
  // Check if the term is an expression.
  // The implementation is technically not correct, but good enough
  dnx-primitive-is-exp: exp -> exp 
    where
       (name, _) := <explode-term> exp; <string-starts-with(|"RGR_")> name
  
  // Create a Continuation reference with the given name
  dnx-primitive-cont-label: name -> FVM_Cont(name)
  
  // Create a Link label with the given name
  dnx-primitive-link-label: name -> FVM_Link(name)
  
  // Assign a value to the given register
  dnx-primitive-assign: (var, val) -> ([RGR_Assign(var, val)], None())
  
  // Convert an integer to a machine integer
  dnx-primitive-int-constant: n -> RGR_IntVal(n)
  
  // Create a code block label with a given name
  dnx-primitive-mk-label: name -> FVM_Label(name)
  
  // Create a header object
  dnx-primitive-mk-header: DNX_Header(links, continuations, _, size) -> FVM_Header(<concat> [
  		<map(dnx-primitive-mk-header-link)> links, 
  		<map(dnx-primitive-mk-header-cont)> continuations, 
  		[FVM_InitSize(<int-to-string <+ !"0"> size)]
  	])
  
  // Create a link label to use in a header
  dnx-primitive-mk-header-link: (idx, label) -> FVM_LinkAlias(FVM_Link(label), <int-to-string> idx)
  
  // Create a continuation label to use in a header
  dnx-primitive-mk-header-cont: (idx, name)  -> FVM_ContAlias(FVM_Cont(name), <int-to-string> idx)


rules // Expressions
  dnx-primitive-call(|p): ("null", [])        -> ([], RGR_NLoad())
  dnx-primitive-call(|p): ("pop", [])         -> ([], RGR_CFRGet())
  dnx-primitive-call(|p): ("curC", [lbl])     -> ([], RGR_ContCur(lbl))
  dnx-primitive-call(|p): ("newC", [e1, e2])  -> ([], RGR_ContNew(e1, e2))
  dnx-primitive-call(|p): ("curCF", [])       -> ([], RGR_CFThis())
  dnx-primitive-call(|p): ("newCF", [e1])     -> ([], RGR_CFNew(e1))
  dnx-primitive-call(|p): ("getC", [e1, e2])  -> ([], RGR_ContGet(e1, e2))
  dnx-primitive-call(|p): ("unpackC", [e1])   -> ([], RGR_ContUnpack(e1))
  dnx-primitive-call(|p): ("unpackCF", [e1])  -> ([], RGR_CFUnpack(e1))
  
  dnx-primitive-call(|p): ("req",  [e1, e2]) -> ([], RGR_REq(e1, e2))
  dnx-primitive-call(|p): ("char", [c])      -> ([], RGR_CharLoad(c))
  
  dnx-primitive-call(|p): ("int",  [n])      -> ([], RGR_ILoad(n))                 where <is-string> n
  dnx-primitive-call(|p): ("int",  [n])      -> ([], RGR_ILoad(<int-to-string> n)) where <is-int> n
  dnx-primitive-call(|p): ("ineg", [e1])     -> ([], RGR_INeg(e1))
  dnx-primitive-call(|p): ("iadd", [e1, e2]) -> ([], RGR_IAdd(e1, e2))
  dnx-primitive-call(|p): ("imul", [e1, e2]) -> ([], RGR_IMul(e1, e2))
  dnx-primitive-call(|p): ("isub", [e1, e2]) -> ([], RGR_ISub(e1, e2))
  dnx-primitive-call(|p): ("idiv", [e1, e2]) -> ([], RGR_IDiv(e1, e2))
  dnx-primitive-call(|p): ("imod", [e1, e2]) -> ([], RGR_IMod(e1, e2))
  dnx-primitive-call(|p): ("ieq",  [e1, e2]) -> ([], RGR_IEq(e1, e2))
  dnx-primitive-call(|p): ("ilt",  [e1, e2]) -> ([], RGR_ILt(e1, e2))
  dnx-primitive-call(|p): ("igt",  [e1, e2]) -> ([], RGR_IGt(e1, e2))
  dnx-primitive-call(|p): ("ior",  [e1, e2]) -> ([], RGR_IOr(e1, e2))
  dnx-primitive-call(|p): ("ixor", [e1, e2]) -> ([], RGR_IXor(e1, e2))
  dnx-primitive-call(|p): ("iand", [e1, e2]) -> ([], RGR_IAnd(e1, e2))
  
  dnx-primitive-call(|p): ("is-null",  [e1]) -> ([], RGR_IsNull(e1))
  dnx-primitive-call(|p): ("is-int",   [e1]) -> ([], RGR_IsInt(e1))
  dnx-primitive-call(|p): ("is-frame", [e1]) -> ([], RGR_IsFrame(e1))
  dnx-primitive-call(|p): ("is-CF", [e1]) -> ([], RGR_IsCF(e1))
  dnx-primitive-call(|p): ("is-continuation", [e1]) -> ([], RGR_IsCont(e1))
  
  dnx-primitive-call(|p): ("new",  [e1]) -> ([], RGR_New(e1))
  dnx-primitive-call(|p): ("size", [e1]) -> ([], RGR_FSize(e1))
  dnx-primitive-call(|p): ("get",  [e1, e2]) -> ([], RGR_Get(e1, <fvm-convert-path> e2)) where <is-list> e2
  dnx-primitive-call(|p): ("get",  [e1, e2]) -> ([], RGR_Get(e1, e2))
  dnx-primitive-call(|p): ("cur", []) -> ([], RGR_ScopeGetCurrent())
  
rules // Statements
  // Convert a statement to a list of instructions and expression tuple
  stmt: instrs -> (<map( (\ instr -> RGR_Stmt(instr) \) )> instrs, None())
  
  // Convert a control statement to a list of instructions and expression tuple
  control: instr -> ([instr], None())
  
  dnx-primitive-call(|p): ("link", [e1, e2, e3])  -> <stmt> [RGR_Link(e1, <try(fvm-convert-path)> e2, e3)]
  dnx-primitive-call(|p): ("set", [e1, e2, e3])   -> <stmt> [RGR_Set(e1, <fvm-convert-path> e2, e3)] where <is-list> e2
  dnx-primitive-call(|p): ("set", [e1, e2, e3])   -> <stmt> [RGR_Set(e1, e2, e3)]
  dnx-primitive-call(|p): ("setC", [e1, e2, e3])  -> <stmt> [RGR_ContSet(e1, e2, e3)]
  dnx-primitive-call(|p): ("mkcur", [e1])         -> <stmt> [RGR_ScopeSetCurrent(e1)]
  dnx-primitive-call(|p): ("printc", [e1])        -> <stmt> [RGR_PrintChar(e1)]
  
  dnx-primitive-call(|p): ("print", [e1])     -> <stmt> [RGR_Print(e1)]
  dnx-primitive-call(|p): ("debug-state", []) -> <stmt> [RGR_DebugKill()]
  dnx-primitive-call(|p): ("tick", [])        -> <stmt> [RGR_Tick()]
  dnx-primitive-call(|p): ("tock", [])        -> <stmt> [RGR_Tock()]
  
  dnx-primitive-call(|p): ("jump", [e1]) -> <control> RGR_Jump(e1)
  dnx-primitive-call(|p): ("jumpz", [e1, e2, e3]) -> <control> RGR_JumpZ(e1, e2, e3)
  dnx-primitive-call(|p): ("callC", [e1]) -> ([RGR_ContCall(e1)], None())
  dnx-primitive-call(|p): ("callC", [e1|t]) -> ([RGR_ContCallWith(e1, t)], None())
  dnx-primitive-call(|p): ("callCF", [e1, lbl]) -> ([RGR_CFCall(e1, lbl)], None()) 
  dnx-primitive-call(|p): ("returnCF", [e1]) -> <control> RGR_CFReturn(e1)
 