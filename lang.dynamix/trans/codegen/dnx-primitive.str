module dnx-primitive

imports
  nabl2/api
  nabl2/shared/-
  nabl2/runtime/analysis/-
  signatures/Dynamix-sig
  
  codegen/dnx-common
  codegen/fvm-primitive

  
rules
   dnx-primitive-call(|p): ("resolve", [name, ns]) -> ([], <dnx-resolve-name(|ns, p)> name)	// TODO: Correct ordering of slots in scopes (First referenced gets first slot maybe?)
   dnx-primitive-call(|p): ("resolve-scope", [name, ns]) -> ([], <dnx-resolve-name(|ns, p); split-init-last; Fst> name)
   
   dnx-primitive-call(|p): ("length", [list]) -> ([], res) where <is-list> list
     with
       res := <length; int-to-string> list
   dnx-primitive-call(|p): ("zip-with-index", [list]) -> ([], <map-with-index( (\ (idx, term) -> (<dec> idx, term) \) )> list) where <is-list> list
   dnx-primitive-call(|p): ("associate-index", [idx, term, ns]) -> ([], None() ) 
     where <is-int> idx; <is-string> ns
     with <dnx-primitive-associate-(|p, "idx")> (idx, term, ns)
     
   dnx-primitive-call(|p): ("associate-label", [lbl, term, ns]) -> ([], None() ) 
     where <is-string> ns
     with <dnx-primitive-associate-(|p, "lbl")> (lbl, term, ns)
     
   dnx-primitive-associate-(|p, type): (val, term, ns) -> term 
     with
       <nabl2-get-ast-analysis> term;
       occ := <nabl2-mk-occurrence(|ns)> term;
       TermIndex(termfile, termidx) := <nabl2-get-occurrence-index> occ;
       <hashtable-put(|$[[type]_[termfile]_[termidx]], val)> p
   
   dnx-primitive-call(|p): ("continue", []) -> ([], None())
   
   
   // If the label is already defined, we just resolve it and get the value.
   // If it is a forward reference, we create a new one here. (On assoc-site we then get instead of set it)
   dnx-primitive-call(|p): ("resolve-label", [name, ns]) -> ([], label)
     where
       a       := <nabl2-get-ast-analysis> name;
       ref-occ := <nabl2-mk-occurrence(|ns)> name;
       TermIndex(termfile, termidx) := <nabl2-get-resolved-name(|a); Fst; nabl2-get-occurrence-index> ref-occ;
       label := <dnx-primitive-resolve-label(|p)> (termfile, termidx)
       
   dnx-primitive-resolve-label(|p): (file, idx) -> label
     where
       key := $[lbl_[file]_[idx]];
       label := <hashtable-get(|key)> p
       
   dnx-primitive-resolve-label(|p): (file, idx) -> label
     where
       key := $[tmp_lbl_[file]_[idx]];
       label := <newname; dnx-primitive-autolabel> "tmp_l_";
       <hashtable-put(|key, label)> p
   

rules
  dnx-resolve-name(|namespace, properties): name -> path
      with
        a       := <nabl2-get-ast-analysis> name;
        ref-occ := <nabl2-mk-occurrence(|namespace)> name;
        path    := <dnx-resolve-name-path(|namespace, name, properties, a)> ref-occ
        
    dnx-resolve-name-path(|namespace, name, properties, a): ref-occ -> fvm_path 
      where
        (dec-occ, path) := <nabl2-get-resolved-name(|a)> ref-occ
      with
        (path_body, path_end) := <split-init-last> path;
        fvm_path     := <concat>[<map(dnx-from-nabl2-path)> path_body, [<dnx-resolve-name-slot(|namespace, name, properties, a)> dec-occ]]
    
    dnx-resolve-name-path(|namespace, name, properties, a): ref-occ -> fvm_path 
      where
        fvm_path := [<dnx-resolve-name-slot(|namespace, name, properties, a)> ref-occ]
        
    dnx-resolve-name-slot(|namespace, name, prop, a): occ -> idx
      where 
        TermIndex(termfile, termidx) := <nabl2-get-occurrence-index> occ;
        idx := <hashtable-get(|$[idx_[termfile]_[termidx]])> prop
        
    dnx-resolve-name-slot(|namespace, name, prop, a): occ -> idx
      with
        scope := <nabl2-get-decl-scope(|a)> occ;
        occs := <nabl2-get-scope-decls(|a); filter(dnx-is-valid-occurrence(|["Var"]))> scope;
		idx := <find-index(dnx-is-occurrence-match(|namespace, name))> occs
    
    dnx-is-valid-occurrence(|namespaces): occ@Occurrence(Namespace(ns), _, _) -> occ
      where
        <elem> (ns, namespaces)
        
    dnx-is-occurrence-match(|req-ns, req-name): occ@Occurrence(Namespace(req-ns), name, _) -> occ where <equal> (<strip-annos> req-name, <strip-annos> name)
    
    dnx-from-nabl2-path: E(scope, lbl) -> <get-constructor> lbl
    