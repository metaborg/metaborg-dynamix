module dnx-instruction

imports
  signatures/Dynamix-sig
  codegen/dnx-common
  fvm-common
  
  codegen/fvm-primitive
  codegen/dnx-expression
  
rules
  dnx-compile-body(|_, _): MatchError(error) -> ([], MatchError(error))
  dnx-compile-body(|properties, blockslocks): (binds, param_binds, body) -> out
    with
      out := <dnx-compile-instr(|binds, param_binds, properties, blockslocks)> (body, [], None())
  
  
  dnx-compile-instr(|b, p, prop, blocks): ([], instr, exp) -> (instr, exp)
  
  dnx-compile-instr(|b, p, prop, blocks): ([DNX_Exp(exp) | t], instrs, None()) -> out
    where
      (r_instr, r_exp) := <dnx-compile-exp(|b, p, prop, blocks)> exp;
      out := <dnx-compile-instr(|b, p, prop, blocks)> (t, <conc> (instrs, r_instr), r_exp)
      
  dnx-compile-instr(|b, p, prop, blocks): ([DNX_Return(exp) | t], instrs, None()) -> out
    where
      (r_instr, r_exp) := <dnx-compile-exp(|b, p, prop, blocks)> exp;
      out := <dnx-compile-instr(|b, p, prop, blocks)> (t, <conc> (instrs, r_instr), r_exp)
      
  dnx-compile-instr(|b, p, prop, blocks): ([DNX_BindExp(var, val) | t], instrs, None() ) -> out
    where
      (r_instr, r_exp) := <dnx-compile-exp(|b, p, prop, blocks)> val;
      var_name := <newname> var;
      (a_instr, None()) := <dnx-primitive-assign> (<dnx-primitive-autovar> var_name, r_exp);
      newbind := (var, RGR_AutoVar(var_name));
      out := <dnx-compile-instr(|[newbind|b], p, prop, blocks)> (t, <conc> (instrs, r_instr, a_instr), None())
      
  dnx-compile-instr(|b, p, prop, blocks): ([DNX_Bind(var, val) | t], instrs, None() ) -> out
    where
      (_, res) := <dnx-compile-exp(|b, p, prop, blocks)> val;
      var_name := <newname> var;
      newbind := (var, res);
      out := <dnx-compile-instr(|[newbind|b], p, prop, blocks)> (t, instrs, None())
  
  dnx-compile-instr(|b, p, prop, blocks): ([e | _], _, _) -> <debug(!"[Dynamix] "); fail> $[undefined instr: [e]] 
  