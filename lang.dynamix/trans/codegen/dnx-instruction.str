module dnx-instruction

imports
  signatures/Dynamix-sig
  codegen/dnx-common
  fvm-common
  
  codegen/fvm-primitive
  codegen/dnx-expression
  
rules
  dnx-compile-body: MatchError(error) -> ([], MatchError(error))
  dnx-compile-body: (binds, param_binds, body) -> out
    with
      out := <dnx-compile-instr(|binds, param_binds)> (body, [], None())
  
  
  dnx-compile-instr(|b, p): ([], instr, exp) -> (instr, exp)
  
  dnx-compile-instr(|b, p): ([DNX_Exp(exp) | t], instrs, None()) -> out
    where
      (r_instr, r_exp) := <dnx-compile-exp(|b, p)> exp;
      out := <dnx-compile-instr(|b, p)> (t, <conc> (instrs, r_instr), r_exp)
      
  dnx-compile-instr(|b, p): ([DNX_Return(exp) | t], instrs, None()) -> out
    where
      (r_instr, r_exp) := <dnx-compile-exp(|b, p)> exp;
      out := <dnx-compile-instr(|b, p)> (t, <conc> (instrs, r_instr), r_exp)
      
  dnx-compile-instr(|b, p): ([DNX_BindExp(var, val) | t], instrs, None() ) -> out
    where
      (r_instr, r_exp) := <dnx-compile-exp(|b, p)> val;
      var_name := <newname> var;
      (a_instr, None()) := <dnx-primitive-assign> (RGR_AutoVar(var_name), r_exp);
      newbind := (var, RGR_AutoVar(var_name));
      out := <dnx-compile-instr(|[newbind|b], p)> (t, <conc> (instrs, r_instr, a_instr), None())
      
  dnx-compile-instr(|b, p): ([DNX_Bind(var, val) | t], instrs, None() ) -> out
    where
      (_, res) := <dnx-compile-exp(|b, p)> val;
      var_name := <newname> var;
      newbind := (var, res);
      out := <dnx-compile-instr(|[newbind|b], p)> (t, instrs, None())
  
  dnx-compile-instr(|b, p): ([e | _], _, _) -> <fail> where <debug(!"undefined instr: ")> e
  
  