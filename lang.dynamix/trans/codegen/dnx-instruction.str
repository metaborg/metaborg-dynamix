module dnx-instruction

imports
  signatures/Dynamix-sig
  codegen/dnx-common
  fvm-common
  
  codegen/fvm-primitive
  codegen/dnx-expression
  
rules
  // Compile the body of a definition case with a set of bindings gotten from the arguments of the call.
  // In the case of a match error, the error is propagated. 
  //
  // A body is compiled by first assigning new block labels for each DNX labael.
  // After this, each instruction in the body is compiled in a fold-like operation.
  dnx-compile-body(|_, _): DNX_Error(error) -> ([], DNX_Error(error))
  dnx-compile-body(|properties, blocks): (binds, param_binds, body) -> out
    with
      global_binds := <filter((?DNX_Bind(_, DNX_Quote(_)) <+ ?DNX_DefineVar(_)); bind-globals)> body;
      binds' := <conc> (global_binds, binds);
      out := <dnx-compile-instr(|binds', param_binds, properties, blocks)> (body, [], None())

rules
  bind-globals: DNX_Bind(name, DNX_Quote(_)) -> (name, lbl)
    with
      lbl := <string-replace(|"-", "_"); string-replace(|"'", "_"); newname; dnx-primitive-autolabel> name
  
  bind-globals: DNX_DefineVar(name) -> (name, newname)
    with
      newname := <newname; dnx-primitive-autovar> name
  
rules
  // The empty list of instructions does not change the result
  // Basecase of the recursion
  dnx-compile-instr(|b, p, prop, blocks): ([], instr, exp) -> (instr, exp)
 
  // Define a variable for use.
  // Does not bind it to anything.
  dnx-compile-instr(|b, p, prop, blocks): ([DNX_DefineVar(name) | t], instr, None()) -> out
    with
      out := <dnx-compile-instr(|b, p, prop, blocks)> (t, instr, None())
  
  // A non-expression bind does, in contrast to an expression bind, not write the expression value to a register.
  // These binds are only compile-time bindings.
  // Therefore we only need to update the bindings map (or in the case of a fresh variable extend this map).
  // In the case of a quoted block, we already have assigned a label for its binding, so we can use that directly.
  
  dnx-compile-instr(|b, p, prop, blocks): ([DNX_Bind(bind_name, DNX_Quote(Block(body))) | t], instr, None()) -> out
    with
      label := <lookup> (bind_name, b);
      <dnx-compile-quote(|b, p, prop, blocks)> (body, label);
      out := <dnx-compile-instr(|b, p, prop, blocks)> (t, instr, None())
  
  dnx-compile-instr(|b, p, prop, blocks): ([DNX_Bind(var, val) | t], instr, None()) -> out
    where
      <lookup'> (var, b)	// Already bound
    with
      res := <dnx-compile-exp(|b, p, prop, blocks)> val;
      b' := <update-map> (b, var, res); // Update the bound value
      out := <dnx-compile-instr(|b', p, prop, blocks)> (t, instr, None())
      
  dnx-compile-instr(|b, p, prop, blocks): ([DNX_Bind(var, val) | t], instr, None()) -> out
    with
      res := <dnx-compile-exp(|b, p, prop, blocks)> val;
      var_name := <newname> var;
      newbind := (var, res);
      out := <dnx-compile-instr(|[newbind|b], p, prop, blocks)> (t, instr, None())
  

  // An expression 
  // Or it just produces a list of instructions and some VM expression
  dnx-compile-instr(|b, p, prop, blocks): ([DNX_Exp(DNX_Var(var)) | t], instrs, None()) -> out
    where
      (r_instr, r_exp) := <lookup'> (var, b)
    with
      out := <dnx-compile-instr(|b, p, prop, blocks)> (t, <conc> (instrs, r_instr), r_exp)
  
  dnx-compile-instr(|b, p, prop, blocks): ([DNX_Exp(exp) | t], instrs, None()) -> out
    with
      (r_instr, r_exp) := <dnx-compile-exp(|b, p, prop, blocks)> exp;
      out := <dnx-compile-instr(|b, p, prop, blocks)> (t, <conc> (instrs, r_instr), r_exp)
  
  // A return is an identity function for the expression it contains
  dnx-compile-instr(|b, p, prop, blocks): ([DNX_Return(exp) | t], instrs, None()) -> out
    with
      out := <dnx-compile-instr(|b, p, prop, blocks)> ([DNX_Exp(exp) | t], instrs, None())
  
  // An expression bind needs to allocate a register and store the value of the expression in that register.
  // If the DNX variable is already bound, we reuse the register and do not allocate a new one.
  // Otherwise we also need to update the map of bindings for the instructions after this one. 
  dnx-compile-instr(|b, p, prop, blocks): ([DNX_BindExp(var, val) | t], instrs, None() ) -> out
    where
      dnx_var := <lookup'> (var, b)	// Already bound
    with
      (r_instr, r_exp) := <dnx-compile-exp(|b, p, prop, blocks)> val;
      (a_instr, None()) := <dnx-primitive-assign> (dnx_var, r_exp);
      out := <dnx-compile-instr(|b, p, prop, blocks)> (t, <conc> (instrs, r_instr, a_instr), None())
  
  // Not already bound
  dnx-compile-instr(|b, p, prop, blocks): ([DNX_BindExp(var, val) | t], instrs, None() ) -> out
    with
      (r_instr, r_exp) := <dnx-compile-exp(|b, p, prop, blocks)> val;
      new_var := <newname; dnx-primitive-autovar> var;
      (a_instr, None()) := <dnx-primitive-assign> (new_var, r_exp);
      newbind := (var, new_var);
      out := <dnx-compile-instr(|[newbind|b], p, prop, blocks)> (t, <conc> (instrs, r_instr, a_instr), None())
  
  // A label does not change when compiled. We only make sure it is a label.  
  dnx-compile-instr(|b, p, prop, blocks): ([label | t], instrs, None()) -> out
    where
      <dnx-primitive-is-label> label
    with
      out := <dnx-compile-instr(|b, p, prop, blocks)> (t, <conc> (instrs, [label]), None())
  
  // This case should never be triggered as cases for all different Dynamix constructs should be available
  dnx-compile-instr(|b, p, prop, blocks): ([e | _], _, _) -> <debug(!"[Dynamix] "); fail> $[Cannot compile: [<write-to-string> e].] 
  