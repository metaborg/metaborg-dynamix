module dnx-expression

imports
  signatures/Dynamix-sig
  
  codegen/dnx-common
  codegen/dnx-compile
  codegen/dnx-instruction
  codegen/fvm-primitive
  
  fvm-common
  nabl2/api


rules
  // dnx-compile-exp compiles a Dynamix expression to a list of instructions and a vm-expression
  // The rule takes two parameters (and the two hashtables that are threaded throughout the entire compilation)
  // The first is a map with bindings from rule argument variables to their values
  // The second is a map of bindings from rule-parameter names to actual rule names


  // Quotes need to skip this step, as their scoping is completely different
  // In fact, their compilation is delayed untill all compile-time binds are resolved.
  // We just need to know the name of the label where this block will end up.
  dnx-compile-exp(|b, p, prop, blocks): DNX_Quote(Block(body)) -> ([], label)
    with
      label := <newname; dnx-primitive-autolabel> "quote_";
      <dnx-compile-quote(|b, p, prop, blocks)> (body, label)
      
  // In the normal case we substitute all the variables with their actual values
  // After this we call the internal expression compilation rules
  dnx-compile-exp(|b, p, prop, blocks): exp -> out
    with
      bound_exp := <dnx-substitute-arguments(|b)> exp;
      out := <dnx-compile-exp(|p, prop, blocks)> bound_exp
      
  // Replace all variable refereces with their values
  dnx-substitute-arguments(|binds): term -> <topdown(try(dnx-substitute-arguments-(|binds)))> term
  dnx-substitute-arguments-(|binds): DNXTerm_Var(name)  -> <dnx-substitute-arguments-(|binds)> DNX_Var(name)
  dnx-substitute-arguments-(|binds): DNX_Splice(name)   -> <lookup'> ($[~_[name]], binds)
  dnx-substitute-arguments-(|binds): SplicedParam(name) -> <lookup'> ($[~_[name]], binds)
  dnx-substitute-arguments-(|binds): DNX_Var(name)      -> <lookup'> (name, binds)
       
rules
  // Call an other Dynamix rule with the given arguments
  dnx-compile-exp(|p, prop, b): DNX_Call(c_name, c_param, c_args) -> (instr, out_exp)
    with
      // Get the name of the function to call. If it is a parameter variable, we get it from the map of parameters
      s_name := <lookup-or-default(|c_name)> (c_name, p);
      // Same lookup for all the names in the parameters of this call
      s_param := <map((\ param -> <lookup-or-default(|param)> (param, p) \))> c_param;
      
      // Compile the arguments and extract the generated instructions
      (arg_instrs, args_exp) := <extract-instructions> <map(dnx-compile-exp(|p, prop, b))> c_args;
      // Do the actual call
      (out_instr, out_exp) := <dnx-call(|s_name, s_param, prop, b)> args_exp;
      instr := <conc> (arg_instrs, out_instr)
      
  // A reference to a variable remains a reference
  dnx-compile-exp(|p, prop, b): var@RGR_AutoVar(_) -> ([], var)
  
  // A term representing a term should become the actual term
  dnx-compile-exp(|p, prop, b): DNX_Term(term) -> ([], <dnx-compile-term> term)
      
  // Convert link labels and continuation references to the VM constructs that represent them
  dnx-compile-exp(|p, prop, b): DNX_Cont(name) -> ([], <dnx-primitive-cont-label> name)
  dnx-compile-exp(|p, prop, b): DNX_Link(name) -> ([], <dnx-primitive-link-label> name)
      
      
  // Just let the non-Dynamix arguments fall through
  // These are terms most often
  dnx-compile-exp(|p, prop, b): e -> e
    with
      <not(string-starts-with(|"DNX_"))> <get-constructor> e
      
  dnx-compile-exp(|p, prop, b): e -> <debug(!"[Dynamix] "); fail> $[Cannot compile expression: [<write-to-string> e]. This should have thrown a more specific error]

rules
  dnx-compile-quote(|b, p, prop, blocks): (body, label) -> label
    with
      quoted_binds_needed := <collect-all( (\ DNX_Splice(var) -> var\) <+ (\ DNX_BindExpSplice(name, _) -> name \) )> body;
      quoted_binds := <map( (\ name -> ($[~_[name]], <lookup> (name, b)) \) )> quoted_binds_needed;
      
      body' := <topdown(try( 
      	(\ DNX_BindExpSplice(name, exp) -> DNX_BindExp($[~_[name]], exp) \) <+
      	(\ SplicedParam(name) -> <lookup> (name, p) \)
      ))> body;

      (out, None()) := <dnx-compile-body(|prop, blocks)> (quoted_binds, [], body');
      <hashtable-put(|label, out)> blocks

rules
  // Convert A DNXTerm representing a term to the term that it represents
  // For example: DNXTerm_String("string") ---> "string"
  // If it is already a proper Stratego term, this acts as the identity function
  dnx-compile-term: DNXTerm_Int(val) -> val
  dnx-compile-term: DNXTerm_String(string) -> string
  dnx-compile-term: DNXTerm_Pat(name, args) -> <mkterm> (name, <map(dnx-compile-term)> args)
  dnx-compile-term: DNXTerm_List(elems) -> <map(dnx-compile-term)> elems
  dnx-compile-term: DNXTerm_Tuple(elems) -> <map(dnx-compile-term); ListToTuple> elems
  dnx-compile-term: DNXTerm_ListTail(elems, tail) -> <concat> [<map(dnx-compile-term)> elems, <dnx-compile-term> tail]
  dnx-compile-term: var@RGR_AutoVar(_) -> var
  dnx-compile-term: DNX_Cont(name) -> <dnx-primitive-cont-label> name
  dnx-compile-term: DNX_Link(name) -> <dnx-primitive-link-label> name
  dnx-compile-term: DNXTerm_At(term, var) -> <dnx-compile-term; nabl2-copy-ast-index(|var)> term
 
  dnx-compile-term: DNXTermOp_Add(l, r) -> <addi> (v1, v2)
    where
      v1 := <dnx-compile-term; is-int> l;
      v2 := <dnx-compile-term; is-int> r
  
  dnx-compile-term: DNXTermOp_Add(l, r) -> <fail>
    with
      <debug(!"[Dynamix] ")> $[Cannot add [<dnx-compile-term; strip-annos; write-to-string> l] to [<dnx-compile-term; strip-annos; write-to-string> r]]
      
  dnx-compile-term: DNXTermOp_Sub(l, r) -> <subti> (v1, v2)
    where
      v1 := <dnx-compile-term; is-int> l;
      v2 := <dnx-compile-term; is-int> r

  dnx-compile-term: DNXTermOp_Sub(l, r) -> <fail>
    with
      <debug(!"[Dynamix] ")> $[Cannot subtract [<dnx-compile-term; strip-annos; write-to-string> r] from [<dnx-compile-term; strip-annos; write-to-string> l]]
      
  dnx-compile-term: e -> e where <get-constructor; not(string-starts-with(|"DNXTerm"))> e
  
rules
  // Given a list of tuples of a list of instructions and an expression, 
  // make a tuple with a list of instructions and a list of expressions
  // [(a, b), (c, d), (e,f)] ---> (<concat>[a, c, e], [b, d, f])
  extract-instructions: [] -> ([], [])
  extract-instructions: [(instr, exp) | t] -> (<conc> (instr, tail_instr), [exp | tail_arg])
    with
      (tail_instr, tail_arg) := <extract-instructions> t

  extract-instructions: [h | t] -> (tail_instr, [h | tail_arg])
    with
      (tail_instr, tail_arg) := <extract-instructions> t
  